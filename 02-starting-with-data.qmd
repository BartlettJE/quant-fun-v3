# Creating Reproducible Documents {#C02-repro-docs}

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

In this chapter, we introduce you to using code to create **`r glossary("reproducible research")`**. Creating reproducible research means you will write text and code that completely and transparently performs an analysis from start to finish in a way that produces the same result for different people using the same software on different computers. We will cover things such as file structure and setting a working directory, using **`r glossary("R markdown", display = "R Markdown")`** files, and writing code chunks. 

As well as improving transparency with others researchers, reproducible research benefits **you**. When you return to an analysis or task after days, weeks, or months, you will thank past you for doing things in a transparent, reproducible way, as you can easily pick up right where you left off.

**Chapter Intended Learning Outcomes (ILOs)**

By the end of this chapter, you will be able to: 

- ILO1.

## File structure, working directories, and R Projects

In chapter 1, we never worked with files, so you did not have to worry about where you put things on your computer. Before we can start working with R Markdown files, we must explain what a **`r glossary("working directory", def = "The filepath where R is currently loading files from and saving files to.")`** is and how your computer knows where to find things. 

Your working directory is the folder where your computer starts to look for files. It would be able to access files from within that folder and within sub-folders in your working directory, but it would not be able to access folders outside your working directory. 

In this course, we are going to prescribe a way of working to support an organised file system, helping you to know where everything is and where R will try to save things on your computer and where it will try to save and load things. Once you become more comfortable working with files, you can work in a different way that makes sense to you, but we recommend following our instructions for at least RM1 as the first course. 

### Activity 1: Create a folder for all your work {#intro-a1}

In your documents or OneDrive, create a new folder called `ResearchMethods1_2`. This will be your highest level folder where you will save everything for Research Methods 1 and 2. 

::: {.callout-tip}
#### Top tip
When you are a student at the University of Glasgow, you have access to the full Microsoft suite of software. One of those is the cloud storage system OneDrive. We heavily recommend using this to save all your work in as it backs up your work online and you can access it from multiple devices.
:::

Within that folder, create two new folders called `Assessments` and `Quant_Fundamentals`. In `Assessments`, you can save all your assessments for RM1 and RM2 as you come to them. In `Quant_Fundamentals`, that is where you will save all your work as you progress through this book. 

Within `Quant_Fundamentals`, create a new folder called `Chapter_02_reproducible_docs`. As you work through the book, you will create a new chapter folder each time you start a new chapter and the sub-folders will always be the same. Within `Chapter_02_reproducible_docs`, create two new folders called `data` and `figures`. As a diagram, it should look like @fig-img-file-structure. 

```{r file-structure, echo=FALSE}
#| label: fig-img-file-structure
#| fig.cap: "Prescribed file structure for RM 1 and RM 2."

knitr::include_graphics("images/file-structure.png")

```

::: {.callout-tip}
#### How to name files and folders
You might notice in the folder names we avoided using spaces by adding things like underscores _ or capitalising different words. Historically, spaces in folder/file names could cause problems for code, but now it's just slightly easier when file names and folder names do not have spaces in them. 

For naming files and folders, try and choose something sensible so you know what it refers to. You are trying to balance being as short as possible, while still being immediately identifiable. For example, instead of fundamentals of quantitative analysis, we called it `Quant_Fundamentals`. 
:::

::: {.callout-warning}
When you create and name folders to use with R / RStudio, whatever you do, do not call the folder "R". If you do this, sometimes R has an identity crisis and will not save or load your files properly. It can also really damage your setup and require you to reinstall everything as R tends to save all the packages in a folder called R. If there is another folder called R, then it gets confused and stops working properly.
:::

::: {.callout-note collapse="true"}
#### File management when using the online server
If we support you to use the online University of Glasgow **R Server**, working with files is a little different. If you downloaded R / RStudio to your own computer or you are using one of the computers, please ignore this section. 

The main disadvantage to using the R server is that you will need create folders on the server and then upload and download any files you are working on to and from the server. Please be aware that **there is no link between your computer and the R server**. If you change files on the server, they will not appear on your computer until you download them from the server, and you need to be very careful when you submit your assessment files that you are submitting the right file. This is the main reason we recommend installing R / RStudio on your computer wherever possible.

Going forward throughout this book, if you are using the server, you will need to follow an extra step where you also upload them to the sever. As an example: 

1. Log on to the **R server** using the link we provided to you.

2. In the file pane, click `New folder` and create the same structure we demonstrated above.

3. Download <a href="data/ahi-cesd.csv" download>`ahi-cesd.csv`</a> and <a href="data/participant-info.csv">`participant-info.csv`</a> into the `data` folder you created for chapter 2. To download a file from this book, right click the link and select "save link as". Make sure that both files are saved as ".csv". Do not open them on your machine as often other software like Excel can change setting and ruin the files.

4. Now that the files are stored on your computer, go to RStudio on the server and click `Upload` then `Browse` and choose the folder for the chapter you are working on.

5. Click `Choose file` and go and find the data you want to upload.
:::

### Manually setting the working directory {#intro-a2}

Now that you have a folder structure that will keep everything nice and organised, we will demonstrate how you can manually **set the working directory**. If you open RStudio, you can check where the current working directory is by typing the function `getwd()` into the console and pressing enter/return. That will show you the current file path R is using to navigate files. If you look at the Files window in the bottom right, this will also show you the files and folders available from your working directory. 

If you click on the top menu **`Session >> Set Working Directory >> Choose Directory...`**, (@fig-img-working-dir) you can navigate through your documents or OneDrive until you can select `Chapter_02_reproducible_docs`. Click open and that will set the folder as your working directory. You can double check this worked by running `getwd()` again in the console. 

```{r img-working-dir, echo=FALSE}
#| label: fig-img-working-dir
#| fig.cap: "Manually setting the working directory."

knitr::include_graphics("images/working-dir.png")

```

### Activity 2 - Creating an R Project

Knowing how to check and manually set your working directory is useful, but there is a more efficient way of setting your working directory alongside organised file management. You are going to create something called an **`r glossary("R Project", def = "A project is simply a working directory designated with a .RProj file. When you open an R project, it automatically sets the working directory to the folder the project is located in.")`**. 

To create a new project for the work you will do in this chapter (@fig-new-proj): 

1. Click on the top menu and navigate to `File >> New Project...`.

2. You have the option to select from New Directory, Existing Directory, or Version Control. You already created a folder for `Chapter_02_reproducible_docs`, so select Existing Directory. 

3. Click Browse... next to Project working directory to select the folder you want to create the project in. 

4. When you have navigated to `Chapter_02_reproducible_docs` for this chapter, click Open and then Create Project. 

::: {#fig-new-proj layout-ncol=2}

![](images/project-pageone.png)

![](images/project-pagetwo.png)

Starting a new project.
:::

RStudio will restart itself and open with this new project directory as the working directory. You should see something like @fig-img-project-screen.

```{r project-screen, echo=FALSE}
#| label: fig-img-project-screen
#| fig.cap: "RStudio screen in a new project in your chapter 2 folder."

knitr::include_graphics("images/new_project.png")
```

In the files tab in the bottom right window, you will see all the contents in your project directory. You can see your two sub-folders for data and figures and a file called `Chapter_02_reproducible_docs.Rproj`. This is a file that contains all of the project information. When you come back to this project after closing down RStudio, if you double click on the .Rproj file, it will open up your project and have your working directory all set up and ready to go. 

::: {.callout-warning}
In each chapter, we will repeat these instructions at the start to prescribe this file structure, but when you create your own folders and projects, do not ever save a new project **inside** another project. This can cause some hard to resolve problems. For example, it would be fine to create a new project within the `Quant_Fundamentals` folder as we will do for each new chapter, but should never create a new project within the `Chapter_02_reproducible_docs` folder.
:::

## Creating and navigating R Markdown documents

Now you know how to navigate files and folders on your computer, we can start working with R Markdown files. 

Throughout this data skills book and related assignments, you will use a file format called R Markdown (abbreviated as .Rmd) which is a great way to create dynamic documents combining regular text and embedded code chunks.

R Markdown documents are self-contained and fully reproducible, meaning if you have the necessary data, you should be able to run someone else's analyses. This is an important part of your open science training as one of the reasons we teach data skills this way is that it enables us to share open and reproducible information. 

Using these worksheets enables you to keep a record of all the code you write as you progress through this book (as well as any notes to help yourself), for data skills assessments we can give you a task to add required code, and in your research reports you can independently process, visualise, and analyse your data all from one file. 

For more information about R Markdown, feel free to have a look at their main webpage [http://rmarkdown.rstudio.com](http://rmarkdown.rstudio.com){target="_blank"}, but for now the key advantage to know about is that it allows you to write code into a document, along with regular text, and then **`r glossary("knit")`** it to create your document as either a webpage (**`r glossary("HTML", display = "html")`**), a PDF, or Word document (.docx).

### Activity 3: Open, save, and knit a new R Markdown document {#intro-a3}

Open a new R Markdown document by clicking the 'new item' icon and then click 'R Markdown' like @fig-img-new-markdown.

::: {#fig-img-new-markdown layout-ncol=2}

![](images/Create_Rmd_menu.png)

![](images/Create_Rmd_options.png)

Creating a new R Markdown document from the menu (left) and setting title, author, date, and output (right). 
:::

After selecting R Markdown, there are different format options you can explore in time, but Select Document and there are four boxes to complete: 

- Title: This is the title for the document which will appear at the top of the page. For this chapter, enter `02 Creating Reproducible Documents`. 

- Author: This is where you can add your name or names for multiple people. For this chapter, enter your GUID as this will be good practice for the data skills assignments.

- Date: By default, it adds today's date, so it will update every time you knit the document. Leave the default so you know when you completed the chapter, but if you untick, you can manually enter a static date. 

- Default Output Format: You have the option to select from html, PDF, and Word. We will demonstrate how to change output format in a later chapter, so keep html for now as it's the most flexible format.

Once you click **OK**, this will open a new R Markdown document.

Save this R Markdown document by clicking **`File >> Save as`** from the top menu, and name this file "`02_reproducible_docs`". Note the document title and file name are separate, so you still have to name the file when you save it. 

If you have set the working directory correctly, you should now see this file appear in your Files window in the bottom right hand corner like @fig-img-file-dir, alongside your .Rproj file and two folders.

```{r img-file-dir, echo=FALSE}
#| label: fig-img-file-dir
#| fig.cap: "New .Rmd file in your working directory."

knitr::include_graphics("images/Files_newRmd.png")

```

Now you have the default version of the R Markdown file, you have a bunch of text and code to show its capabilities (@fig-img-markdown-default).

```{r img-markdown-default, echo=FALSE, fig.cap="New R Markdown text"}
#| label: fig-img-markdown-default
#| fig.cap: "Default text and code in a new R Markdown document."

knitr::include_graphics("images/Default_Rmd.png")

```

We will now demonstrate what it looks like to **`r glossary("knit")`** a document. This means that we are going to compile (i.e., turn) our code into a document that is more presentable. This way, you can check it knits and there are no errors. So, as we add changes in the following activities, you can identify if and when any errors appear and fix them quicker. 

At the top of your R Markdown window, you should see a Knit button next to a little ball of yarn (@fig-img-knit-document). If you click that, the document will knit and produce a html file. 

```{r img-knit-document, echo=FALSE}
#| label: fig-img-knit-document
#| fig.cap: "Clicking the knit button on a .Rmd document."

knitr::include_graphics("images/knit_document.png")

```

You will see a small version of the knitted document appear in the Viewer tab in the bottom right of your screen. You will also see it has created a new file in your working directory. It will have the same name as your R Markdown file, but with .html as the file ending. You can view the knitted document by clicking the "Show in new window" button or opening the file from your folder (@fig-img-knitted-default). This should open the document in your default internet browser as websites are created in html. 

::: {#fig-img-knitted-default layout-ncol=2}

![](images/Knitted_default_files.png)

![](images/Knitted_default_browser.png)

On the left, you can see a small version of the knitted document in the Viewer tab. On the right, you can see the full version open in your internet browser.
:::

Now everything is working and knitting, we can start editing the R Markdown file to add new content. 

### Activity 4: Create a new code chunk {#intro-a4}

Let's start using your new R Markdown document to combine code and text. Follow these steps: 

1. Delete **everything** below line 10. 

::: {.callout-note collapse="true"} 
#### What does the {r setup} chunk do? 
At the moment, you do not need to worry about the code chunk between lines 8 and 10. We are slowly introducing you to different features in R Markdown as it's easier to understand by doing, rather than giving you a list of explanations. 

If you are really curious though, this setting forces R Markdown to show both the code and output for all code chunks. When we add code shortly, if you change it to `echo = FALSE`, it will only show the output and not the code.
:::

2. On line 12, type "## About me". 

3. With your cursor on line 14, insert a blank code chunk by clicking on the top menu **`Code >> Insert Chunk`** or using the shortcut at the top of the R Markdown window that looks like a small green c and select R. 

Your document should now look something like @fig-img-new-chunk. 

```{r img-new-chunk, echo=FALSE, fig.cap="New R chunk"}
#| label: fig-img-new-chunk
#| fig.cap: "Creating a new R chunk in your blank R Markdown document"

knitr::include_graphics("images/Rmd_blank_insert_chunk.png")

```

What you have created is called a **`r glossary("chunk", display = "code chunk")`**. R Markdown assumes anything written outside of a code chunk is just normal text, just like you would have in a text editor like Word. It assumes anything written inside the code chunk is R code. This makes it easy to combine both text and code in one document.

::: {.callout-important}
#### Error mode
When you create a new code chunk, you should notice that the grey box starts and ends with three back ticks (`` ``` ``), followed by the {r}, and then it ends with three back ticks again. This is the structure that creates a code chunk. You could actually just type this structure instead of using the `Insert` approach but we are introducing you to some shortcuts

One common mistake is to accidentally delete one or more of these back ticks. A useful thing to notice is that code chunks tend to have a different color background - in the default appearance of RStudio a code chunk is grey and the normal text is white. You can use this to look for mistakes. If the colour of certain parts of your Markdown does not look right, check that you have not deleted the backticks.

Remember it is backticks (i.e. this `) and not single quotes (i.e. not this ').
:::

::: {.callout-note}
#### Markdown language
When you typed "## About me", you might notice the two hashes. You will see the effect of this shortly, but this is using **`r glossary("Markdown")`** language to add document formatting. Markdown is a type of formatting language, so instead of using buttons to add features like you would in Word, you add symbols which will produce different features when you knit the document.

The hashes create headers. One (#) creates a first level header (larger text), two (##) creates a second level header, and so on. Make sure there is a space between the text and hash or it will not knit properly. 

As we progress through the book, we will slowly introduce you to different Markdown features, but you can see the [RStudio Markdown Basics page](https://rmarkdown.rstudio.com/lesson-8.html){target="_blank"} if you are interested.
:::

### Activity 5: Write some code {#intro-a5}

Now we are going to use the code examples you read about in Chapter 1 - [Introduction to programming with R/R Studio](#C01-programming-basics) - to add some code to our R Markdown document. 

In your code chunk, write the code below but replace the values of name/age/birthday with your own details). Remember that the four lines of code should all be inside the code chunk.

**Note:** Text and dates need to be contained in quotation marks, e.g., "my name". Numerical values are written without quotation marks, e.g., 45. 

```{r prog-basics}
name <- "James" 
age <- 30
today <- Sys.Date()
next_birthday <- as.Date("2025-02-18") # Year, month, day format
```

::: {.callout-important}
#### Error mode

Missing and/or unnecessary quotation marks are a common cause of code not working. For example, if you try and type `name <- James`, R will try and look for an object called `James` and throw an error since there is not an object called that. When you add quotation marks, R recognises you are storing a character. 
:::

### Activity 6: Run your code {#intro-a6}

We now have code in our code chunk and now we are going to **run** the code. Running the code just means making it do what you told it, such as creating objects or using functions. Remember you need to write the code first, then tell RStudio to run the code. 

When you are working in an R Markdown document, there are several ways to run your lines of code.

1. One option is you can highlight the code you want to run and then click **`Run >> Run Selected Line(s)`** (@fig-img-run1).

```{r img-run1, echo=FALSE}
#| label: fig-img-run1
#| fig.cap: "Slower method of running code by highlighting and clicking Run Selected Line(s)."

knitr::include_graphics("images/run1.png")

```

2. You can press the green "play" button at the top-right of the code chunk and this will run **all** lines of code in that chunk (@fig-img-run2).

```{r img-run2, echo=FALSE}
#| label: fig-img-run2
#| fig.cap: 'Slightly faster method of running all code in a chunk by clicking the green "play" button.'

knitr::include_graphics("images/run2.png")

```

3. There are keyboard shortcuts to run code which will be the fastest as you learn and use RStudio more frequently. For example, to run a single line of code, make sure that the cursor is in the line of code (it can be anywhere on the line) you want to run and press `ctrl + enter` (`command + return` on a Mac). 

::: {.callout-note}
#### Keyboard shortcuts

There are loads of keyboard shortcuts, but you might only use a handful to speed up your day-to-day tasks. For a full list, look in the top menu `Help >> Keyboard shortcuts help`. 
:::

Now run your code using one of the methods above. You should see the variables `name`, `age`, `today`, and `next_birthday` appear in the environment pane in the top right corner.

::: {.callout-tip}
#### Try this
Clear out the [environment using the broom handle approach](#look-env) we saw in Chapter 1 and try a different method to see which works best for you. 
:::

### Activity 7: Inline code {#intro-a7}

Your code works and you now know how to run it, but one of the incredible benefits we said about R Markdown is that you can mix text and code. Even better is the ability to combine code with text to put specific outputs of your code, like a value, using **`r glossary("inline code", def = "Directly inserting the result of code into the text of a .Rmd file.")`**. 

Think about a time you have had to copy and paste a value or text from one file into another and you will know how easy it can be to make mistakes or find the origin of your mistake. Inline code avoids this. It is easier to show you what inline code does rather than to explain it so let us have a go.

First, copy and paste this text exactly (do not change *anything*) to underneath and outside your code chunk:

```{r, eval = FALSE}
My name is `r name` and I am `r age` years old. 

It is `r next_birthday - today` days until my birthday.
```

Your .Rmd should look like @fig-img-aboutme-rmd but nothing will happen yet. Unlike code chunks, you cannot run inline code. You need to knit your document for it to do it's magic. 

```{r img-aboutme-rmd, echo=FALSE}
#| label: fig-img-aboutme-rmd
#| fig.cap: "Complete .Rmd file with your about me section and inline code."

knitr::include_graphics("images/Rmd_about_me.png")

```

```{r, echo=FALSE}
object <- "r object"
function_name <- "r function"
```

::: {.callout-note collapse="true"}
#### How does inline code work? 

Inline code has the following form:

```{r eval=FALSE}
`r object`
```

or 

```{r eval=FALSE}
`r function(...)`
```

Here, we are using the first version where we are referencing an object we already created. This is normally a good idea if you have a long function to run as it's easier to spot mistakes in a code chunk than inline code. 

You will see it has the form of a backtick (`` ` ``), `r` and a space, the object/function you want to reference, and a final backtick. When the R Markdown file knits, it sees the `r` and recognises it as inline code and uses the object or function. 

If you just write the two backticks without the `r`, it will just add code formatting and not produce inline code.
:::

### Activity 8: Knitting your file {#intro-a8}

As our final step in this part, we are going to knit our file again to see how it looks now. So, click the Knit button to regenerate your knitted .html version.

If you look at the knitted .html document in the Viewer tab or in your browser, you should see the sentence we copied in from Activity 7. As if by magic, that slightly odd bit of text you copied and pasted now appears as a normal sentence with the values pulled in from the objects you created:

My name is **`r name`** and I am **`r age`** years old. <br><br>It is **`r next_birthday - today`** days until my birthday.

R Markdown is an incredibly powerful and flexible format, we wrote this whole book using it! There are a few final things to note about knitting that will be useful going forward for your data skills learning and assessments:

- R Markdown will only knit if your code works. If you have an error, it will stop and tell you to fix the error before you can click knit and try again. This is a good way of checking whether you have written functioning code in your assessments. 

- When you knit an R Markdown document, it runs the code from the start of the document to the end in order, and in a fresh session. This means it cannot access your environment, just the objects you create within that R Markdown. One common error can be writing and running code as you work on the document, but the code chunks are in the wrong order, or you created an object in the console but not in the code chunks. This means R Markdown would not know the object exists yet, or it does not have access to it at all. 

- You can choose to knit to a Word document rather than HTML. This can be useful for sharing with others or adding further edits, but you might lose some functionality. By default, html looks good and is accessible, so that will be our default throughout this book, but look out for our instructions on what output format we want your assessments in. 

- You can choose to knit to PDF, however, unless you are using the server this requires a **`r glossary("LaTeX")`** installation and can be quite complicated. If you do not already know what LaTeX is and how to use it, we do not recommend trying to knit to PDF just yet. If you do know how to use LaTeX, you probably do not need us to give you instructions!

We will test some of these warnings in error mode in the test yourself section, but we have one final demonstration for how R Markdown files can be reproducible. 

## Demonstrating reproducibility 



## Finished

And you're done! On your very first time using R you've not only written functioning code but you've written a reproducible output! You could send someone else your R Markdown document and they would be able to produce exactly the same HTML document as you, just by pressing knit.

The key thing we want you to take away from this chapter is that the data skills that you are going to learn can be broken down into manageable chunks and that is how we are going to teach you to help you learn them. The skills might be very new to a lot of you, but we're going to take you through it step-by-step. You'll be amazed at how quickly you can start producing professional-looking data visualisations and analysis.

If you have any questions about anything contained in this chapter or in Programming Basics, please remember to ask us!

## Test Yourself

1. One of the key first steps when we open RStudio is to: `r longmcq(c(answer = "set your working directory", "put on some top tunes as we will be here a while", "build some folders", "make a coffee"))`

`r hide("Explain This Answers")`
```{r, echo = FALSE, results='asis'}
cat("One of the most common issues we see is that code doesn't work first time because people have forgotten to set the working directory. The working directory is the file you want to save any files to, or any output, or contains your data. Code needs to know where the data is so we set the working directory as the first step when we open RStudio")
```
`r unhide()`

<br>
  
2. When using the default environment color settings for RStudio what color would the background of a code chunk be in R Markdown? `r mcq(c("white","red","green",answer = "grey"))`

3. When using the default environment color settings for RStudio what color would the background of normal text be in R Markdown? `r mcq(c(answer = "white","red","green","grey"))`

`r hide("Explain These Answers")`
```{r, echo = FALSE, results='asis'}
cat("Assuming you haven't changed any of the settings in RStudio, code chunks will tend to have a grey background and normal text will tend to have a white background. This is a good way to check that you have closed and opened code chunks correctly.")
```
`r unhide()`

<br>

4. Code chunks are started with: `r longmcq(c("three single quotes", answer = "three backticks", "three double quotes", "three single clefs"))`

`r hide("Explain This Answers")`
```{r, echo = FALSE, results='asis'}
cat("Code chunks always take the same general format of three backticks followed by curly parentheses and a lower case r inside the parentheses. Often people mistake these backticks for single quotes but that won't work. If you have set your code chunk correctly, using backticks, the background color will change!")
```
`r unhide()`

<br>
  
5. Inline coding is: `r longmcq(c("where you nicely organise your code in a line","where you make sure all the code is nicely indented from the side","an exuberant way of exclaiming you have written good code!", answer = "an approach of intergrating code and text in a sentence outside of a code chunk"))`

`r hide("Explain This Answers")`
```{r, echo = FALSE, results='asis'}
cat("Inline coding is an incredibly useful approach for merging text and code in a sentence outside of a code chunk. It can be really useful for when you want to add values from your code directly into your text. Copying and pasting can create errors easily so better to code it when you can!")
```
`r unhide()`

Error mode: 

- Code outside of a code chunk

- Missing backtick 

- Object before inline code

- inline code without the r

## Getting ready to work with data

In this chapter you will learn how to load the **`r glossary("package", display = "packages")`** required to work with the data. You'll then load the data into RStudio before getting it organised into a format (or structure) that helps us answer our research question. And a top tip to remember is to always think back to what we have done before - for instance, if you can't remember what packages are, go back and revise the [Programming Basics](programming-basics.html){target="_blank"}.

Before we begin working with the data we need to do some set-up and get the data into our working directory. 

### Activity 1: Set-up the data, working directory and Rmd file {#ld-a1}

* Download <a href="ahi-cesd.csv" download>`ahi-cesd.csv`</a> and <a href="participant-info.csv">`participant-info.csv`</a> into the folder on your computer you want to use for this chapter! 
    * To download a file from this book, right click the link and select "save link as". Make sure that both files are saved as ".csv". Do not open them on your machine as often other software like Excel can change setting and ruin the files and cause you problems. We will look at the data once we load it into R and RStudio.
    * If you are working on the server, you will need to upload the files to the server as well.
* Next, open RStudio and ensure the environment is clear.
    * If you're on the server, avoid a number of issues by restarting the session - click `Session` - `Restart R` 
* Set the working directory to your chapter folder. You might want to refer to [Activity 2 in Chapter 2](#intro-a2){target="_blank"} if you are unsure about this step.
* Now open a new R Markdown document (.Rmd file) and save it in your working directory. Call the file "LoadingData". You can refer to [Activity 3 in Chapter 2](#intro-a3){target="_blank"}
    * **Note:** Your R Markdown file (`LoadingData.Rmd`) must be in the same folder as the datafiles or the code we are going to write will not work.
* Finally, delete the default R Markdown text and insert a new code chunk. Remember to only delete the text and code that comes below/after line 7.

We are now ready to begin working with the data. A **top tip** is to use the white space to take any notes that might help you for each activity and to make reminders to yourself about what things do!

### Activity  2: Loading a package to our library {#ld-a2}

Today we need to use the **`r glossary("tidyverse")`** package. You will use this package in almost every single chapter of this course as the functions it contains are those we use for **`r glossary("data wrangling")`**, **`r glossary("descriptive")`** statistics, and visualisation. So let's load that package into our library using the `library()` function.

* To load the `tidyverse` type the following code into your code chunk and then run it. 
* Remember that sometimes in the **`r glossary("console", display = "console window")`** you will see information about the package you have loaded, but sometimes you won't. You should however see the line of code you have just run repeated in the console window. If you see any red text, be sure to read it as it might be a warning, an error or a message. 

```{r T1, warning = FALSE, message = FALSE}
library(tidyverse)
```

## The data

For this chapter, we use real data from @woodworth_data_2018 '[Web-based Positive Psychology Interventions: A Reexamination of Effectiveness](https://openpsychologydata.metajnl.com/articles/10.5334/jopd.35){target="_blank"}'. It would be useful to read the abstract to give you a sense of what the paper is about and what the data might look like, but in summary, the files contain data from two scales as well as demographic information about participants. The two scales are:

- The Authentic Happiness Inventory (AHI).

- The Center for Epidemiological Studies Depression (CES-D) scale. 

### Activity 3: Read in data {#ld-a3}

Now that we have our data in our folder we need to read in the data - "read" in this sense just means to bring the data into RStudio and store it in an **`r glossary("object")`** so we can work with it. To do this we will use the function `read_csv()` that allows us to read in **`r glossary("CSV", display = ".csv files")`**. There are also functions that allow you to read in Excel files (e.g. .xlsx) and other formats, however in this course we will only use .csv files as they are not software specific and therefore are better for when looking to practice open science! A .csv file can be read by any basic text editor on nearly all machines.

* The code chunk below reads in both datafiles. Type it into your code chunk and run them. Let's look at what they do.
* First, we create an object called `dat` that contains the data in the `ahi-cesd.csv` file.
* Next we then create an object called `info` that contains the data in the `participant-info.csv`.
* Note how both lines have the same format of `object <- function("datafile_name.csv")`
    * it is imperative that you have the double quotation marks around the datafile name and that the datafile name is spelt correctly and includes the .csv part.
    * and remember that `<-` is called the **`r glossary("assignment operator")`** but we can read it as "assigned to". For example, the first line can be read as the data in `ahi-cesd.csv` is assigned to the object called `dat`.

```{r T3, warning = FALSE, message = FALSE}
dat <- read_csv("data/ahi-cesd.csv")
pinfo <- read_csv("data/participant-info.csv")
```

If you have done this activity correctly, and the preceding activities, you should now see that the objects `dat` and `pinfo` have appeared in the **`r glossary("Environment", display = "environment")`** pane. If they are not there then you should check the spelling of the filenames and the structure of the code lines as well as maybe the working directory.

```{block, type="danger"}
WATCH OUT! There is also a function called `read.csv()`. Be very careful NOT to use this function instead of `read_csv()` as they have different ways of naming columns. For the activities and the assignments we will always ask and expect you to use `read_csv()`. This is really a reminder to watch spelling on functions and to be careful to use the right functions.
```

## Looking at Data

Great! Now that we have our data read in the first step you should always do is to have an initial check to see what your data looks like. Normally you will have an idea already from the experiment you ran but if you are using someones data you might not, so best to check it out. There are several ways you can look at your data and these are listed in Activity 4 below. Try them all to see how the results differ.

### Activity 4: Look at your data {#ld-a4}

* **Option 1:** In the environment pane, click on the name of the object you want to look at. For example, click the names `dat` and `pinfo`. This will open the data to give you a spreadsheet-like view (although you can't edit it like in Excel)  
* **Option 2:** In the environment pane, click the small blue play button to the left of `dat` and `pinfo`. This will show you the structure of the object information including the names of all the variables in that object and what type they are (also see `str(pinfo)`) 
* **Option 3:** In the console window, type and run `str(pinfo)` and then `str(dat)`
* **Option 4:** Repeat option 3 but this time use the `summary()` function - e.g. `summary(dat)`
* **Option 5:** Repeat option 3 but this time use the `head()` function
* **Option 6:** Type the name of the object you want to view in the console window and run it, e.g., type `dat` in the console window and run it.

As you can see there are various different ways to get an idea of what your data looks like. Each tells you similar but also different info. We will explore more as we get further into the book but for now just be aware that you can use all of these approaches to see your data. More often than not Option 1 and Option 2 give you the info you need, the quickest.

## Joining Data

So far so awesome! We have our data and we know what it looks like, so let's start trying to do things with our data! The first thing we will do is combine datafiles! We have two files, `dat` and `info` but what we really want is a single file that has both the data and the demographic information about the participants as it makes it easier to work with the data when it is all combined together. To do this we are going to use the function `inner_join()` which comes from the `dplyr` package - one of the packages loaded in as part of the `tidyverse`. But don't worry to much about deliberately trying to remember all the different packages and functions as it will come naturally with the practice we give you.

* **Top tip:** Remember to use the help function `?inner_join` if you want more information about how to use a function and to use tab auto-complete to help you write your code.

### Activity 5: Join the files together {#ld-a5}

The below code will create a new object, called `all_dat`, that combines the data from both `dat` and `pinfo` using the information in the columns `id` and `intervention` to match the participants' data across the two sets of data. This is going to be an **`r glossary("inner-join", display = "inner join approach")`** - data will only be kept for a participant if they exist in both datafiles. There are lots of different joins but we will see them as we go further into the book.

* Type and run the below code in a new code chunk to inner join the two sets of data.
* Let's see if we can make sense of what is happening
    * `all_dat` is the new object that has the data combined
    * `x` is the first argument and it should be the first data/object you want to combine
    * `y` is the second argument and it should be the second data/object you want to combine
    * `by` is the third argument and it lists the names of the columns you want to combine the data by. It uses an additional function `c()` to say that there is more than one column to combine by.

```{r T5}
all_dat <- inner_join(x = dat, 
                      y = pinfo, 
                      by = c("id", "intervention"))
```

Once you have run this code you should now see the `all_dat` in the environment pane. View the new dataset using one of the methods from Activity 4. In fact, try to remember that you should always view any new object or data that you create. Code often can run but that doesn't necessarily mean it is correct. The programme only ever knows what the code says not what you thought you said. Get into the habit of always checking output!

## Selecting Data

Excellent! We have now combined our data into one big object! However, Very frequently, datasets will have more variables, information, and data than you actually want to use and it can make life easier to create a new object with just the data you need. So, our final step today is to select just some variables of interest! 
In our case, the `all_dat` contains the responses to each individual question on both the AHI scale and the CESD scale, as well as the total score (i.e., the sum of all the individual responses). Let's say for our analysis all we care about is the total scores and the demographic information about participants. We are going to use a new function called the `select()` function, again from the `dplyr` package, to select only the columns we are interested in and store them in (i.e. assign them to) a new object called `summarydata`

### Activity 6: Pull out variables of interest {#ld-a6}

* Type and run the below code in a new code chunk. Let's also have a quick look at the code.
    * summarydata is the new object we are creating using the `select()` function
    * `.data` is the first argument and it wants to know what object are we going to select columns from. In this instance `all_dat`.
    * next we have a list of columns that we want to keep. Every column must be spelt correctly and must exist in the object you are selecting it from. Makes sense really; otherwise the function wouldn't know what you wanted!

```{r T4}
summarydata <- select(.data = all_dat, 
                      ahiTotal, 
                      cesdTotal, 
                      sex, 
                      age, 
                      educ, 
                      income, 
                      occasion,
                      elapsed.days)
```

If that has worked correctly you should see `summarydata` in the environment pane and can run `head(summarydata)` now in the console window to get a view of the output. If you see any red text in the console window it would be worth checking the spelling of the objects and columns you wanted to select. If everything has gone to plan the output should look something like this:

```{r, echo = FALSE, results='asis'}

head(summarydata)%>%
  knitr::kable(digits = 2, align = "c")

```

## Knitting our Reproducible code

As we saw in [Activity 8 in Chapter 2](##intro-a8-a3){target="_blank"} our final step to making a reproducible document is to knit it to HTML! Try knitting your file to HTML now! If all the code is working correctly then you should get an html document showing all your code! If you don't get the output there could be a few issues either relating to your code or to your installation. You can use the below debugging tips to ask yourself some questions about your code. If all the code looks correct be sure to speak to one of the TEAM to see what might be wrong.

### Debugging tips {#ld-debug}

* When you downloaded the files did you save the file names **exactly** as they were originally? If you download the file more than once you will find your computer may automatically add a number to the end of the file name. `data.csv` is not the same as `data(1).csv`. Pay close attention to names!
* Have you used the **exact** same object names as we did in each activity? Remember, `name` is different to `Name`. In order to make sure you can follow along with this book, pay special attention to ensuring you use the same object names as we do.  
* Have you used quotation marks where needed?  
* Have you accidentally deleted any back ticks (```) from the beginning or end of code chunks?

## Code Layout

And one very quick point before we end for the day.  You may have noticed we wrote code as such:

```{r T5-ex1, eval = FALSE}
all_dat <- inner_join(x = dat, 
                      y = pinfo, 
                      by = c("id", "intervention"))
```

But we could also have written it as:

```{r T5-ex2, eval = FALSE}
all_dat <- inner_join(x = dat, y = pinfo, by = c("id", "intervention"))
```

Both do exactly the same! In a code chunk you can take a new line after a comma (,) and the code nicely idents for you. It can make it easier to read and to debug if the code is nicely presented but it isn't essential!

## Finished! {#ld-fin}

And that's it, well done! Remember to save your work in your chapter folder and make a note of any mistakes you made and how you fixed them. You have started on your journey to become a confident and competent member of the open scientific community! 

Now would be a good time to get comfortable with what we've covered already and revise the activities and support materials presented so far if needed. If you're feeling comfortable with you can work your way through this book at your own pace or push yourself by using the additional resources highlighted in Programming Basics. And don't forget to try out the tasks below to check your understanding and knowledge of the skills you are learning!

Finally, if you're using the R server, we strongly recommend that you download a copy of any files you have been working on and save them on your machine so that you have a local back-up.

## Test yourself {#ld-test}

### Knowledge Questions

1. When loading in a .csv file, which function should you use? `r longmcq(c(answer = "read_csv()", "read.csv()", "select()", "library()"))`

`r hide("Explain this answer")`
```{r, echo = FALSE, results='asis'}
cat("Remember, in this course we use `read_csv()` and it is important that you use this function otherwise you may find that the data does not work as expected.")
```
`r unhide()` 

2. The function `inner_join()` takes the arguments `x`, `y`, `by`. What does `by` do? `r longmcq(c("Specifies the first object to join", "Specifies the second object to join", answer = "Specifies the column to join by that both objects have in common"))`

`r hide("Explain this answer")`
```{r, echo = FALSE, results='asis'}
cat("Remember, functions have arguments and the arguments all do something slightly different. In the `inner_join()` the `by` argument says which columns to join by. If you want to join by more than one column you need to put both columns inside the `c()` function.")
```
`r unhide()` 

3. What does the function `select()` do? `r longmcq(c("Keeps only the observations you specify", answer = "Keeps only the columns you specify", "Keeps only the objects you specify"))`

`r hide("Explain this answer")`
```{r, echo = FALSE, results='asis'}
cat("The `select()` function comes from one of the tidyverse packages - dplyr to be precise. It is the main function we use to keep and remove columns we want or don't want. You will start to remember functions you need as you work more with them. Remember the best approach is to think back to what you did!")
```
`r unhide()`

### Debugging exercises {#ld-debugex}

One key skill is learning how to fix errors in your code. These exercises below are specifically design to create errors. Ruun each exercise and try to solve the errors yourself before moving on to the next one. Make a note of what the error message was and how you solved it - you might find it helpful to create a new file just for error solving notes. You will find that you often make the same errors in over and over again when running analyses; experts also make tonnes of errors. The difference between a novice and an expert is that when you are first learning, an error might slow you down, but you will greatly speed you up with practice. Don't be put off by errors! 

1. Restart the R session (**`Session >> Restart R`**). Make sure that the working directory is set to the right folder and then run the below code:

```{r debugging1, eval=FALSE}
dat <- read_csv("ahi-cesd.csv")
```

This will produce the error:

```
`could not find function "read_csv"`
```

Once you figure out how to fix this error, make a note of it.

`r hide("Solution")`
```{r, echo = FALSE, results='asis'}
cat("When you restarted the session you unloaded all the packages you previously had loaded - i.e. the `tidyverse`. The function `read_csv()` is part of the `tidyverse` package which means that in order for the code to run you need to run `library(tidyverse)` to reload the package so that you can use the function. Remember that we always need to load packages into our library but we only install them once. Again, think about apps on your phone!")
```
`r unhide()` 


2. Restart the R session (**`Session >> Restart R`**). Make sure that the working directory is set to the right folder and then run the below code:

```{r debugging2, eval = FALSE}
library(tidyverse)
dat <- read_csv("ahi-cesd")
```

This will produce the error: 

```
`Error: 'ahi-cesd' does not exist in current working directory`.
```

Once you figure out how to fix this error, make a note of it.

`r hide("Solution")`
```{r, echo = FALSE, results='asis'}
cat("When loading data you need to provide the full file name including the file extension. In this case the error was caused by writing `ahi-cesd` instead of `ahi-cesd.csv`. As far as coding goes, these are two completely different files and only one of them exists in the working directory.")
```
`r unhide()` 


3. Restart the R session (**`Session >> Restart R`**). Make sure that the working directory is set to the right folder and then run the below code:

```{r, eval=FALSE}
library(tidyverse)
dat <- read_csv ("ahi-cesd.csv")
pinfo <- read_csv("participant-info.csv")
all_dat <- inner_join(x = dat, 
                      y = pinfo, 
                      by = "id", "intervention") 
summary(all_dat)
```

Look at the summary for `all_dat`. You will see that R has duplicated the `intervention` variable, so that there is now an `intervention.x` and an `intervention.y` that contain the same data. Once you figure out how to fix this error, make a note of it.

`r hide("Solution")`
```{r, echo = FALSE, results='asis'}
cat("If you want to join two objects that have mulitple columns in common you need to use the `c()` command to list all of the columns. The code above hasn't done this, it's just listed `id` and `intervention` without enclosing them with `c()` so it defaults to using just the first one and ignores the other column. When it does this both objects had an `intervention` column so it keeps both. The rule is, when joining objects, join them by all common columns!.")
```
`r unhide()` 


## Words from this Chapter

Below you will find a list of words that were used in this chapter that might be new to you in case it helps to have somewhere to refer back to what they mean. The links in this table take you to the entry for the words in the [PsyTeachR Glossary](https://psyteachr.github.io/glossary/){target="_blank"}. Note that the Glossary is written by numerous members of the team and as such may use slightly different terminology from that shown in the chapter.

```{r gloss, echo=FALSE, results='asis'}
glossary_table()
```

**End of Chapter**

That is end of this chapter. Be sure to look again at anything you were unsure about and make some notes to help develop your own knowledge and skills. It would be good to write yourself some questions about what you are unsure of and see if you can answer them later or speak to someone about them. Good work today!
