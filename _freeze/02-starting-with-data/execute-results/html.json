{
  "hash": "69b7b01085437d113f27fa4ba303c1c5",
  "result": {
    "markdown": "# Creating Reproducible Documents {#C02-repro-docs}\n\n\n\n\n\nIn this chapter, we introduce you to using code to create **<a href='https://psyteachr.github.io/glossary/r#reproducible-research' target='_blank' class='glossary' title='Research that documents all of the steps between raw data and results in a way that can be verified.'>reproducible research</a>**. We will cover things such as file structure and setting a working directory, using **<a href='https://psyteachr.github.io/glossary/r#r-markdown' target='_blank' class='glossary' title='The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.'>R Markdown</a>** files, and writing code chunks. \n\nCreating reproducible research means you will write text and code that completely and transparently performs an analysis from start to finish in a way that produces the same result for different people using the same software on different computers. Transparently completing this process helps both **you** and **other researchers**. \n\nFor you, your future self will benefit from a reproducible script. When you return to an analysis or task after days, weeks, or months, you will thank your earlier self for doing things in a transparent, reproducible way, as you can easily pick up right where you left off.\n\nFor other researchers, others can understand and check your work. This idea of open science developed over the past decade plus in response to the replication or credibility crisis. As a field, we recognised psychology research has a historical lack of transparency about data and analysis methods, meaning errors can slip into the analysis and publication process. \n\nAs part of your skill development, it is important that you work with data so that you can become confident and competent in your management and analysis of data. Starting in this chapter, we introduce you to creating reproducible documents alongside developing your data skills.\n\n**Chapter Intended Learning Outcomes (ILOs)**\n\nBy the end of this chapter, you will be able to: \n\n- ILO1.\n\n## File structure, working directories, and R Projects\n\nIn chapter 1, we never worked with files, so you never had to worry about where you put things on your computer. Before we can start working with R Markdown files, we must explain what a **<a class='glossary' title='The filepath where R is currently loading files from and saving files to.'>working directory</a>** is and how your computer knows where to find things. Your working directory is the folder where your computer starts to look for files. It would be able to access files from within that folder and within sub-folders in your working directory, but it would not be able to access folders outside your working directory. \n\nIn this course, we are going to prescribe a way of working to support an organised file system, helping you to know where everything is and where R will try to save things on your computer and where it will try to save and load things. Once you become more comfortable working with files, you can work in a different way that makes sense to you, but we recommend following our instructions for at least the first few chapters.\n\n### Activity 1: Create a folder for all your work {#intro-a1}\n\nIn your documents or OneDrive, create a new folder called `ResearchMethods1_2`. This will be your highest level folder where you will save everything for Research Methods 1 and 2. \n\n::: {.callout-tip}\n#### Top tip\nWhen you are a student at the University of Glasgow, you have access to the full Microsoft suite of software. One of those is the cloud-based storage system OneDrive. We heavily recommend using this to save all your work in as it backs up your work online and you could access it from multiple devices.\n:::\n\nWithin that folder, create two new folders called `Assessments` and `Quant_Fundamentals`. In `Assessments`, you can save all your assessments for this course as you come to them. In `Quant_Fundamentals`, that is where you will save all your work as you work through this book. \n\nWithin `Quant_Fundamentals`, create a new folder called `Chapter_02_reproducible_docs`. As you work through the book, you will create a new chapter folder each time you start a new chapter and the sub-folders will always be the same. Within `Chapter_02_reproducible_docs`, create two new folders called `data` and `figures`. As a diagram, it should look like @fig-img-file-structure. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Prescribed files structure for Research Methods 1 and 2.](images/file-structure.png){#fig-img-file-structure fig-align='center' width=100%}\n:::\n:::\n\n\n::: {.callout-tip}\n#### Top tip\nYou might notice in the folder names we avoided using spaces by adding things like underscores _ or capitalising different words. Historically, spaces in folder/file names could cause problems for code, but now its just slightly easier when file names and folder names do not have spaces in them. \n\nFor naming files and folders, try and choose something sensible so you know what it refers to. You are trying to balance being as short as possible, while still being immediately identifiable. For example, instead of fundamentals of quantitative analysis, we called it `Quant_Fundamentals`. \n:::\n\n::: {.callout-warning}\nWhen you create and name folders to use with R / RStudio, Whatever you do, do not call the folder \"R\". If you do this, sometimes R has an identity crisis and will not save or load your files properly. It can also really damage your setup of R and lead you to having to reinstall everything. The reason calling your folder \"R\" can be a problem is R tends to save all the packages in a folder called R. If there is another folder called R, then it gets confused and stops working properly.\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### File management when using the online server\nIf we support you to use the online University of Glasgow **R Server**, working with files is a little different. If you downloaded R / R Studio to your own computer or you are using one of the computers, please ignore this section. \n\nThe main disadvantage to using the R server is that you will need create folders on the server and then upload and download any files you are working on to and from the server. Please be aware that **there is no link between your computer and the R server**. If you change files on the server, they will not appear on your computer until you download them from the server, and you need to be very careful when you submit your assessment files that you are submitting the right file. This is the main reason we recommend installing R / RStudio on your computer wherever possible.\n\nGoing forward throughout this book, if you are using the server, you will need to follow an extra step where you also upload them to the sever. As an example: \n\n1. Log on to the **R server** using the link we provided to you.\n\n2. In the file pane, click `New folder` and create the same structure we demonstrated above.\n\n3. Download <a href=\"data/ahi-cesd.csv\" download>`ahi-cesd.csv`</a> and <a href=\"data/participant-info.csv\">`participant-info.csv`</a> into the `data` folder you created for chapter 2. To download a file from this book, right click the link and select \"save link as\". Make sure that both files are saved as \".csv\". Do not open them on your machine as often other software like Excel can change setting and ruin the files.\n\n4. Now that the files are stored on your computer, go to RStudio on the server and click `Upload` then `Browse` and choose the folder for the chapter you are working on.\n\n5. Click `Choose file` and go and find the data you want to upload.\n:::\n\n### Manually setting the working directory {#intro-a2}\n\nNow that you have a folder structure that will keep everything nice and organised, we will demonstrate how you can manually **set the working directory**. If you open R Studio, you can check where the current working directory is by typing the function `getwd()` into the console and pressing enter/return. That will show you the current file path R is using to navigate files. \n\nIf you click on the top menu **`Session >> Set Working Directory >> Choose Directory...`**, (@fig-img-working-dir) you can navigate through your documents or OneDrive until you can select `Chapter_02_reproducible_docs`. Click open and that will set the folder as your working directory. You can double check this worked by running `getwd()` again in the console. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Manually setting the working directory.](images/working-dir.png){#fig-img-working-dir fig-align='center' width=100%}\n:::\n:::\n\n\n### Activity 2 - Creating an R Project\n\nKnowing how to check and manually set your working directory is useful, but there is a more efficient way of setting your working directory alongside organised file management. You are going to create something called an **<a class='glossary' title='A project is simply a working directory designated with a .RProj file. When you open an R project, it automatically sets the working directory to the folder the project is located in.'>R Project</a>**. \n\nTo create a new project for the work you will do in this chapter (@fig-new-proj): \n\n1. Click on the top menu and navigate to `File >> New Project...`.\n\n2. You have the option to select from New Directory, Existing Directory, or Version Control. You already created a folder for `Chapter_02_reproducible_docs`, so select Existing Directory. Click Browse... next to Project working directory to select the folder you want to create the project in, \n\n3. When you have navigated to `Chapter_02_reproducible_docs` for this chapter, click Open and then Create Project. \n\n::: {#fig-new-proj layout-ncol=2}\n\n![](images/project-pageone.png)\n\n![](images/project-pagetwo.png)\n\nStarting a new project.\n:::\n\nRStudio will restart itself and open with this new project directory as the working directory. You should see something like @fig-img-project-screen.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![RStudio screen in a new project in your chapter 2 folder.](images/new_project.png){#fig-img-project-screen fig-align='center' width=100%}\n:::\n:::\n\n\nIn the files tab in the bottom right window, you will see all the contents in your project directory. You can see your two sub-folders for data and figures and a file called `Chapter_02_reproducible_docs.Rproj`. This is a file that contains all of the project information. When you come back to this project after closing down RStudio, if you double click on .Rproj file, it will open up your project and have your working directory all set up and ready to go. \n\n::: {.callout-warning}\nIn each chapter, we will repeat these instructions at the start to prescribe this file structure, but when you create your own folders and projects, do not ever save a new project **inside** another project directory. This can cause some hard-to-resolve problems. For example, it would be fine to create a new project within the `Quant_Fundamentals` folder, but not within the `Chapter_02_reproducible_docs` folder.\n:::\n\n## R Markdown for data skills and portfolio assignments\n\nOk great, we now have a folder structure we are going to use and we have told R where it is so now let's write some code!\n\nFor the duration of this data skills book and the related assignments you will use a worksheet format called R Markdown (abbreviated as Rmd) which is a great way to create dynamic documents with embedded chunks of code. Remember you saw scripts in Chapter 1? Well R Markdown is like a script but has some excellent features that make it so much better. \n\nR Markdown documents are self-contained and fully reproducible (if you have the necessary data, you should be able to run someone else's analyses with the click of a button) which makes it very easy to share. This is an important part of your open science training as one of the reasons we teach data skills this way is that it enables us to share open and reproducible information. Using these worksheets enables you to keep a record of all the code you write during this course, and when it comes time for the portfolio assignments, we can give you a task you can and then fill in the required code.\n\nFor more information about R Markdown feel free to have a look at their main webpage sometime [http://rmarkdown.rstudio.com](http://rmarkdown.rstudio.com){target=\"_blank\"} but for now, the key advantage to know about is that it allows you to write code into a document, along with regular text, and then **<a href='https://psyteachr.github.io/glossary/k#knit' target='_blank' class='glossary' title='To create an HTML, PDF, or Word document from an R Markdown (Rmd) document'>knit</a>** it using the package `knitr` to create your document as either a webpage (**<a href='https://psyteachr.github.io/glossary/h#html' target='_blank' class='glossary' title='Hyper-Text Markup Language: A system for semantically tagging structure and information on web pages.'>HTML</a>**), a PDF, or Word document (.docx). This will become more clear with an example!\n\n### Activity 3: Open and save a new R Markdown document {#intro-a3}\n\n* Open a new R Markdown document by clicking the 'new item' icon and then click 'R Markdown' as shown here:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Opening a new R Markdown document](images/new-markdown.png){fig-align='center' width=100%}\n:::\n:::\n\n\n* You will now be prompted to give it a title so let's call it \"Intro to R\". \n* Also, change the author name to your GUID as this will be good practice for the portfolio assignments. * Leave the output format selected as HTML for now!\n\nOnce you click **OK** this will open a new R Markdown document.\n\n* Save this R Markdown document, by clicking **`File >> Save as`** from the top menu, and name this file \"Intro to R\" as well. \n\nIf you've set the working directory correctly, you should now see this file appear in your file viewer pane in the bottom right hand corner like in the example below (your file names and folders will be different depending on what you called the folders and file).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![New file in working directory](images/file-dir.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Activity 4: Create a new code chunk {#intro-a4}\n\nGreat. We now have our R Markdown document so let's start using it to see how we can combine code and text to create an informative document.\n\nWhen you first open a new R Markdown document you will see a bunch of default text that looks like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![New R Markdown text](images/markdown-default.png){fig-align='center' width=100%}\n:::\n:::\n\n\nThe default text is just there to give you some examples of what you can do with R Markdown but we are going to show you that as well so do the following:\n\n* Delete **everything** below line 7\n* On line 8 type \"About me\"\n* Click on the Top Menu: **`Code >> Insert Chunk`** from the top menu.\n\nYour Markdown document should now look something like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![New R chunk](images/new-chunk.png){fig-align='center' width=100%}\n:::\n:::\n\n\nWhat you have created is called a **<a href='https://psyteachr.github.io/glossary/c#chunk' target='_blank' class='glossary' title='A section of code in an R Markdown file'>code chunk</a>**. In R Markdown, anything written outside of a code chunk is assumed to be just normal text, just like you would have in a text editor, and anything written inside the code chunk is assumed to be code. This makes it easy to combine both text and code in one document.\n\n\n::: {.cell layout-align=\"center\" type='warning'}\n<div class=\"warning\">\n<p>When you create a new code chunk you should notice that the grey box\nstarts and ends with three back ticks, followed by the {r}, and then it\nends with three back ticks again. This is the structure that creates a\ncode chunk. You could actually just type this structure instead of using\nthe <code>Insert</code> approach but when learning it does help a\nbit!</p>\n<p>One common mistake is to accidentally delete these back ticks. A\nuseful thing to notice is that code chunks tend to have a different\ncolor background - in the default viewing settings a code chunk is grey\nand the normal text is white. You can use this to look for mistakes. If\nthe colour of certain parts of your Markdown doesn’t look right, check\nthat you haven’t deleted the backticks.</p>\n<p>In addition, remember it is backticks (i.e. this `) and not single\nquotes (i.e. not this ’)!</p>\n</div>\n:::\n\n\n### Activity 5: Write some code {#intro-a5}\n\nAwesome! You are doing great and learning more than you think you are! \n\nNow we're going to use the code examples you read about in Programming Basics to add some code to our R Markdown document. \n\n* In your code chunk write the below code but replace the values of name/age/birthday with your own details). Remember that the four lines of code should all be inside the code chunk!\n\n**Note:** Text and dates need to be contained in quotation marks, e.g. \"my name\". Numerical values are written without quotation marks, e.g. 45. \n\n**Top tip:** Missing and/or unnecessary quotation marks are a common cause of code not working - remember this!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nname <- \"Emily\" \nage <- 35\ntoday <- Sys.Date()\nnext_birthday <- as.Date(\"2021-07-11\")\n```\n:::\n\n\n## Running code in R Markdown\n\nBrilliant! We now have code in our code chunk and now we are going to **run** the code! Running the code just trying to make it work, or seeing if it works! When you're working in an R Markdown document, there are several ways to run your lines of code.\n\n* First, one slow option is you can highlight the code you want to run and then click **`Run >> Run Selected Line(s)`**.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Slow method of running code](images/run1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n* Alternatively, you can press the green \"play\" button at the top-right of the code chunk and this will run **all** lines of code in that chunk.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Slightly faster method of running code that runs all lines within the code chunk!](images/run2.png){fig-align='center' width=100%}\n:::\n:::\n\n\nEven better though is to learn some of the keyboard shortcuts below so it becomes more natural and fluid in your typing and makes your learning easier! \n\n* To run a single line of code, make sure that the cursor is in the line of code you want to run and press `ctrl + enter`. \n* If you want to run all of the code in the code chunk, press `ctrl + shift + enter`. \n**Note:** When using this last method of running lines of code - by positioning the cursor on the line and using `ctrl + enter` on your keyboard, note that the cursor does not have to be at any specific point of the line, i.e. it does not have to be at the start, middle or the end, it can literally be anywhere. \n\n### Activity 6: Run your code {#intro-a6}\n\n* Now run your code using one of the methods above. You should see the variables `name`, `age`, `today`, and `next_birthday` appear in the environment pane in the top right corner.\n* Clear out the [environment using the broom handle approach](#look-env) we saw in Chapter 1 and try a different method to see which works best for you!\n\n### Activity 7: Inline code {#intro-a7}\n\nSuperb! Our code works and we know how to run it. But one of the incredible benefits we said about R Markdown is that you can mix text and code. Even better is that you can combined code into a sentence to put specific outputs of your code, like a value, using what is called **inline code**. Think about a time you've had to copy and paste a value or text from one file in to another and you'll know how easy it can be to make mistakes. Inline code avoids this. It's easier to show you what inline code does rather than to explain it so let's have a go.\n\nFirst, copy and paste this text exactly (do not change *anything*) to the underneath and outside your code chunk - this will be the white section under the grey code chunk if you are using default views.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nMy name is `r name` and I am `r age` years old. \n\nIt is `r next_birthday - today` days until my birthday.\n```\n:::\n\n\nOk so nothing happened there but that is because we have not done the last magic step - in the next activity!\n\n### Activity 8: Knitting your file {#intro-a8}\n\nAs our final step we are going to **<a href='https://psyteachr.github.io/glossary/k#knit' target='_blank' class='glossary' title='To create an HTML, PDF, or Word document from an R Markdown (Rmd) document'>knit</a>** our file. This means that we're going to compile (i.e. turn) our code into a document that is more presentable. \n* From the top menu, click **`Knit >> Knit to HMTL`**. R Markdown will now create a new HTML document and it will automatically save this file in your working directory.\n\nNow let's look at this outputted HTML document and at the sentence we copied in from Activity 7. As if by magic, that slightly odd bit of text you copied and pasted now appears as a normal sentence with the values pulled in from the objects you created.\n\n**My name is Emily and I am 35 years old. <br><br>It is -1097 days until my birthday.**\n\nPretty amazing isn't it! We're not going to use inline coding very often in the rest of the course but hopefully you can see just how useful this would be when writing up a report with lots of numbers! R Markdown is an incredibly powerful and flexible format - this book was written using it! The key thing about using inline coding is the structure, i.e. the backtick, followed by the lower case r, then space, then the code, then another backtick. You will get the hang of it as the semester goes on with a little practice.\n\nThere are a few final things to note about knitting that will be useful for going forward with your data skills learning and assignments:\n\n* R Markdown will only knit if your code works - this is a good way of checking for assignments whether you've written functioning code!\n* You can choose to knit to a Word document rather than HTML. This can be useful for e.g., sharing with others, however, it may lose some functionality and it probably won't look as good so we'd recommend always knitting to HTML.\n* You can choose to knit to PDF, however, unless you're using the server this requires a LaTex installation and is quite complicated. If you don't already know what LaTex is and how to use it, do not knit to PDF. If you do know how to use LaTex, you don't need us to give you instructions!\n* R will automatically open the knitted HTML file in the viewer, however, you can also navigate to the folder it is stored in and open the HTML file in your web browser (e.g., Chrome or Firefox).\n\n## Finished\n\nAnd you're done! On your very first time using R you've not only written functioning code but you've written a reproducible output! You could send someone else your R Markdown document and they would be able to produce exactly the same HTML document as you, just by pressing knit.\n\nThe key thing we want you to take away from this chapter is that the data skills that you are going to learn can be broken down into manageable chunks and that is how we are going to teach you to help you learn them. The skills might be very new to a lot of you, but we're going to take you through it step-by-step. You'll be amazed at how quickly you can start producing professional-looking data visualisations and analysis.\n\nIf you have any questions about anything contained in this chapter or in Programming Basics, please remember to ask us!\n\n## Test Yourself\n\n1. One of the key first steps when we open RStudio is to: <div class='webex-radiogroup' id='radio_RVVSFQXBPK'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RVVSFQXBPK\" value=\"answer\"></input> <span>set your working directory</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RVVSFQXBPK\" value=\"\"></input> <span>put on some top tunes as we will be here a while</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RVVSFQXBPK\" value=\"\"></input> <span>build some folders</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RVVSFQXBPK\" value=\"\"></input> <span>make a coffee</span></label></div>\n\n\n\n<div class='webex-solution'><button>Explain This Answers</button>\n\n\n::: {.cell layout-align=\"center\"}\nOne of the most common issues we see is that code doesn't work first time because people have forgotten to set the working directory. The working directory is the file you want to save any files to, or any output, or contains your data. Code needs to know where the data is so we set the working directory as the first step when we open RStudio\n:::\n\n\n</div>\n\n\n<br>\n  \n2. When using the default environment color settings for RStudio what color would the background of a code chunk be in R Markdown? <select class='webex-select'><option value='blank'></option><option value=''>white</option><option value=''>red</option><option value=''>green</option><option value='answer'>grey</option></select>\n\n3. When using the default environment color settings for RStudio what color would the background of normal text be in R Markdown? <select class='webex-select'><option value='blank'></option><option value='answer'>white</option><option value=''>red</option><option value=''>green</option><option value=''>grey</option></select>\n\n\n<div class='webex-solution'><button>Explain These Answers</button>\n\n\n::: {.cell layout-align=\"center\"}\nAssuming you haven't changed any of the settings in RStudio, code chunks will tend to have a grey background and normal text will tend to have a white background. This is a good way to check that you have closed and opened code chunks correctly.\n:::\n\n\n</div>\n\n\n<br>\n\n4. Code chunks are started with: <div class='webex-radiogroup' id='radio_IDQUGUSFDS'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_IDQUGUSFDS\" value=\"\"></input> <span>three single quotes</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_IDQUGUSFDS\" value=\"answer\"></input> <span>three backticks</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_IDQUGUSFDS\" value=\"\"></input> <span>three double quotes</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_IDQUGUSFDS\" value=\"\"></input> <span>three single clefs</span></label></div>\n\n\n\n<div class='webex-solution'><button>Explain This Answers</button>\n\n\n::: {.cell layout-align=\"center\"}\nCode chunks always take the same general format of three backticks followed by curly parentheses and a lower case r inside the parentheses. Often people mistake these backticks for single quotes but that won't work. If you have set your code chunk correctly, using backticks, the background color will change!\n:::\n\n\n</div>\n\n\n<br>\n  \n5. Inline coding is: <div class='webex-radiogroup' id='radio_KGPDICYLJV'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KGPDICYLJV\" value=\"\"></input> <span>where you nicely organise your code in a line</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KGPDICYLJV\" value=\"\"></input> <span>where you make sure all the code is nicely indented from the side</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KGPDICYLJV\" value=\"\"></input> <span>an exuberant way of exclaiming you have written good code!</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KGPDICYLJV\" value=\"answer\"></input> <span>an approach of intergrating code and text in a sentence outside of a code chunk</span></label></div>\n\n\n\n<div class='webex-solution'><button>Explain This Answers</button>\n\n\n::: {.cell layout-align=\"center\"}\nInline coding is an incredibly useful approach for merging text and code in a sentence outside of a code chunk. It can be really useful for when you want to add values from your code directly into your text. Copying and pasting can create errors easily so better to code it when you can!\n:::\n\n\n</div>\n\n\n## Getting ready to work with data\n\nIn this chapter you will learn how to load the **<a href='https://psyteachr.github.io/glossary/p#package' target='_blank' class='glossary' title='A group of R functions.'>packages</a>** required to work with the data. You'll then load the data into RStudio before getting it organised into a format (or structure) that helps us answer our research question. And a top tip to remember is to always think back to what we have done before - for instance, if you can't remember what packages are, go back and revise the [Programming Basics](programming-basics.html){target=\"_blank\"}.\n\nBefore we begin working with the data we need to do some set-up and get the data into our working directory. \n\n### Activity 1: Set-up the data, working directory and Rmd file {#ld-a1}\n\n* Download <a href=\"ahi-cesd.csv\" download>`ahi-cesd.csv`</a> and <a href=\"participant-info.csv\">`participant-info.csv`</a> into the folder on your computer you want to use for this chapter! \n    * To download a file from this book, right click the link and select \"save link as\". Make sure that both files are saved as \".csv\". Do not open them on your machine as often other software like Excel can change setting and ruin the files and cause you problems. We will look at the data once we load it into R and RStudio.\n    * If you are working on the server, you will need to upload the files to the server as well.\n* Next, open RStudio and ensure the environment is clear.\n    * If you're on the server, avoid a number of issues by restarting the session - click `Session` - `Restart R` \n* Set the working directory to your chapter folder. You might want to refer to [Activity 2 in Chapter 2](#intro-a2){target=\"_blank\"} if you are unsure about this step.\n* Now open a new R Markdown document (.Rmd file) and save it in your working directory. Call the file \"LoadingData\". You can refer to [Activity 3 in Chapter 2](#intro-a3){target=\"_blank\"}\n    * **Note:** Your R Markdown file (`LoadingData.Rmd`) must be in the same folder as the datafiles or the code we are going to write will not work.\n* Finally, delete the default R Markdown text and insert a new code chunk. Remember to only delete the text and code that comes below/after line 7.\n\nWe are now ready to begin working with the data. A **top tip** is to use the white space to take any notes that might help you for each activity and to make reminders to yourself about what things do!\n\n### Activity  2: Loading a package to our library {#ld-a2}\n\nToday we need to use the **<a href='https://psyteachr.github.io/glossary/t#tidyverse' target='_blank' class='glossary' title='A set of R packages that help you create and work with tidy data'>tidyverse</a>** package. You will use this package in almost every single chapter of this course as the functions it contains are those we use for **<a href='https://psyteachr.github.io/glossary/d#data-wrangling' target='_blank' class='glossary' title='The process of preparing data for visualisation and statistical analysis.'>data wrangling</a>**, **<a href='https://psyteachr.github.io/glossary/d#descriptive' target='_blank' class='glossary' title='Statistics that describe an aspect of data (e.g., mean, median, mode, variance, range)'>descriptive</a>** statistics, and visualisation. So let's load that package into our library using the `library()` function.\n\n* To load the `tidyverse` type the following code into your code chunk and then run it. \n* Remember that sometimes in the **<a href='https://psyteachr.github.io/glossary/c#console' target='_blank' class='glossary' title='The pane in RStudio where you can type in commands and view output messages.'>console window</a>** you will see information about the package you have loaded, but sometimes you won't. You should however see the line of code you have just run repeated in the console window. If you see any red text, be sure to read it as it might be a warning, an error or a message. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## The data\n\nFor this chapter, we use real data from @woodworth_data_2018 '[Web-based Positive Psychology Interventions: A Reexamination of Effectiveness](https://openpsychologydata.metajnl.com/articles/10.5334/jopd.35){target=\"_blank\"}'. It would be useful to read the abstract to give you a sense of what the paper is about and what the data might look like, but in summary, the files contain data from two scales as well as demographic information about participants. The two scales are:\n\n- The Authentic Happiness Inventory (AHI).\n\n- The Center for Epidemiological Studies Depression (CES-D) scale. \n\n### Activity 3: Read in data {#ld-a3}\n\nNow that we have our data in our folder we need to read in the data - \"read\" in this sense just means to bring the data into RStudio and store it in an **<a href='https://psyteachr.github.io/glossary/o#object' target='_blank' class='glossary' title='A word that identifies and stores the value of some data for later use.'>object</a>** so we can work with it. To do this we will use the function `read_csv()` that allows us to read in **<a href='https://psyteachr.github.io/glossary/c#csv' target='_blank' class='glossary' title='Comma-separated variable: a file type for representing data where each variable is separated from the next by a comma.'>.csv files</a>**. There are also functions that allow you to read in Excel files (e.g. .xlsx) and other formats, however in this course we will only use .csv files as they are not software specific and therefore are better for when looking to practice open science! A .csv file can be read by any basic text editor on nearly all machines.\n\n* The code chunk below reads in both datafiles. Type it into your code chunk and run them. Let's look at what they do.\n* First, we create an object called `dat` that contains the data in the `ahi-cesd.csv` file.\n* Next we then create an object called `info` that contains the data in the `participant-info.csv`.\n* Note how both lines have the same format of `object <- function(\"datafile_name.csv\")`\n    * it is imperative that you have the double quotation marks around the datafile name and that the datafile name is spelt correctly and includes the .csv part.\n    * and remember that `<-` is called the **<a href='https://psyteachr.github.io/glossary/a#assignment-operator' target='_blank' class='glossary' title='The symbol &lt;-, which functions like = and assigns the value on the right to the object on the left'>assignment operator</a>** but we can read it as \"assigned to\". For example, the first line can be read as the data in `ahi-cesd.csv` is assigned to the object called `dat`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- read_csv(\"data/ahi-cesd.csv\")\npinfo <- read_csv(\"data/participant-info.csv\")\n```\n:::\n\n\nIf you have done this activity correctly, and the preceding activities, you should now see that the objects `dat` and `pinfo` have appeared in the **<a href='https://psyteachr.github.io/glossary/e#environment' target='_blank' class='glossary' title='A data structure that contains R objects such as variables and functions'>environment</a>** pane. If they are not there then you should check the spelling of the filenames and the structure of the code lines as well as maybe the working directory.\n\n\n::: {.cell layout-align=\"center\" type='danger'}\n<div class=\"danger\">\n<p>WATCH OUT! There is also a function called <code>read.csv()</code>.\nBe very careful NOT to use this function instead of\n<code>read_csv()</code> as they have different ways of naming columns.\nFor the activities and the assignments we will always ask and expect you\nto use <code>read_csv()</code>. This is really a reminder to watch\nspelling on functions and to be careful to use the right functions.</p>\n</div>\n:::\n\n\n## Looking at Data\n\nGreat! Now that we have our data read in the first step you should always do is to have an initial check to see what your data looks like. Normally you will have an idea already from the experiment you ran but if you are using someones data you might not, so best to check it out. There are several ways you can look at your data and these are listed in Activity 4 below. Try them all to see how the results differ.\n\n### Activity 4: Look at your data {#ld-a4}\n\n* **Option 1:** In the environment pane, click on the name of the object you want to look at. For example, click the names `dat` and `pinfo`. This will open the data to give you a spreadsheet-like view (although you can't edit it like in Excel)  \n* **Option 2:** In the environment pane, click the small blue play button to the left of `dat` and `pinfo`. This will show you the structure of the object information including the names of all the variables in that object and what type they are (also see `str(pinfo)`) \n* **Option 3:** In the console window, type and run `str(pinfo)` and then `str(dat)`\n* **Option 4:** Repeat option 3 but this time use the `summary()` function - e.g. `summary(dat)`\n* **Option 5:** Repeat option 3 but this time use the `head()` function\n* **Option 6:** Type the name of the object you want to view in the console window and run it, e.g., type `dat` in the console window and run it.\n\nAs you can see there are various different ways to get an idea of what your data looks like. Each tells you similar but also different info. We will explore more as we get further into the book but for now just be aware that you can use all of these approaches to see your data. More often than not Option 1 and Option 2 give you the info you need, the quickest.\n\n## Joining Data\n\nSo far so awesome! We have our data and we know what it looks like, so let's start trying to do things with our data! The first thing we will do is combine datafiles! We have two files, `dat` and `info` but what we really want is a single file that has both the data and the demographic information about the participants as it makes it easier to work with the data when it is all combined together. To do this we are going to use the function `inner_join()` which comes from the `dplyr` package - one of the packages loaded in as part of the `tidyverse`. But don't worry to much about deliberately trying to remember all the different packages and functions as it will come naturally with the practice we give you.\n\n* **Top tip:** Remember to use the help function `?inner_join` if you want more information about how to use a function and to use tab auto-complete to help you write your code.\n\n### Activity 5: Join the files together {#ld-a5}\n\nThe below code will create a new object, called `all_dat`, that combines the data from both `dat` and `pinfo` using the information in the columns `id` and `intervention` to match the participants' data across the two sets of data. This is going to be an **<a href='https://psyteachr.github.io/glossary/i#inner-join' target='_blank' class='glossary' title='A mutating join that returns all the rows that have a match in the other table.'>inner join approach</a>** - data will only be kept for a participant if they exist in both datafiles. There are lots of different joins but we will see them as we go further into the book.\n\n* Type and run the below code in a new code chunk to inner join the two sets of data.\n* Let's see if we can make sense of what is happening\n    * `all_dat` is the new object that has the data combined\n    * `x` is the first argument and it should be the first data/object you want to combine\n    * `y` is the second argument and it should be the second data/object you want to combine\n    * `by` is the third argument and it lists the names of the columns you want to combine the data by. It uses an additional function `c()` to say that there is more than one column to combine by.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_dat <- inner_join(x = dat, \n                      y = pinfo, \n                      by = c(\"id\", \"intervention\"))\n```\n:::\n\n\nOnce you have run this code you should now see the `all_dat` in the environment pane. View the new dataset using one of the methods from Activity 4. In fact, try to remember that you should always view any new object or data that you create. Code often can run but that doesn't necessarily mean it is correct. The programme only ever knows what the code says not what you thought you said. Get into the habit of always checking output!\n\n## Selecting Data\n\nExcellent! We have now combined our data into one big object! However, Very frequently, datasets will have more variables, information, and data than you actually want to use and it can make life easier to create a new object with just the data you need. So, our final step today is to select just some variables of interest! \nIn our case, the `all_dat` contains the responses to each individual question on both the AHI scale and the CESD scale, as well as the total score (i.e., the sum of all the individual responses). Let's say for our analysis all we care about is the total scores and the demographic information about participants. We are going to use a new function called the `select()` function, again from the `dplyr` package, to select only the columns we are interested in and store them in (i.e. assign them to) a new object called `summarydata`\n\n### Activity 6: Pull out variables of interest {#ld-a6}\n\n* Type and run the below code in a new code chunk. Let's also have a quick look at the code.\n    * summarydata is the new object we are creating using the `select()` function\n    * `.data` is the first argument and it wants to know what object are we going to select columns from. In this instance `all_dat`.\n    * next we have a list of columns that we want to keep. Every column must be spelt correctly and must exist in the object you are selecting it from. Makes sense really; otherwise the function wouldn't know what you wanted!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummarydata <- select(.data = all_dat, \n                      ahiTotal, \n                      cesdTotal, \n                      sex, \n                      age, \n                      educ, \n                      income, \n                      occasion,\n                      elapsed.days)\n```\n:::\n\n\nIf that has worked correctly you should see `summarydata` in the environment pane and can run `head(summarydata)` now in the console window to get a view of the output. If you see any red text in the console window it would be worth checking the spelling of the objects and columns you wanted to select. If everything has gone to plan the output should look something like this:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n| ahiTotal | cesdTotal | sex | age | educ | income | occasion | elapsed.days |\n|:--------:|:---------:|:---:|:---:|:----:|:------:|:--------:|:------------:|\n|    32    |    50     |  1  | 46  |  4   |   3    |    5     |    182.03    |\n|    34    |    49     |  1  | 37  |  3   |   2    |    2     |    14.19     |\n|    34    |    47     |  1  | 37  |  3   |   2    |    3     |    33.03     |\n|    35    |    41     |  1  | 19  |  2   |   1    |    0     |     0.00     |\n|    36    |    36     |  1  | 40  |  5   |   2    |    5     |    202.10    |\n|    37    |    35     |  1  | 49  |  4   |   1    |    0     |     0.00     |\n:::\n:::\n\n\n## Knitting our Reproducible code\n\nAs we saw in [Activity 8 in Chapter 2](##intro-a8-a3){target=\"_blank\"} our final step to making a reproducible document is to knit it to HTML! Try knitting your file to HTML now! If all the code is working correctly then you should get an html document showing all your code! If you don't get the output there could be a few issues either relating to your code or to your installation. You can use the below debugging tips to ask yourself some questions about your code. If all the code looks correct be sure to speak to one of the TEAM to see what might be wrong.\n\n### Debugging tips {#ld-debug}\n\n* When you downloaded the files did you save the file names **exactly** as they were originally? If you download the file more than once you will find your computer may automatically add a number to the end of the file name. `data.csv` is not the same as `data(1).csv`. Pay close attention to names!\n* Have you used the **exact** same object names as we did in each activity? Remember, `name` is different to `Name`. In order to make sure you can follow along with this book, pay special attention to ensuring you use the same object names as we do.  \n* Have you used quotation marks where needed?  \n* Have you accidentally deleted any back ticks (```) from the beginning or end of code chunks?\n\n## Code Layout\n\nAnd one very quick point before we end for the day.  You may have noticed we wrote code as such:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_dat <- inner_join(x = dat, \n                      y = pinfo, \n                      by = c(\"id\", \"intervention\"))\n```\n:::\n\n\nBut we could also have written it as:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nall_dat <- inner_join(x = dat, y = pinfo, by = c(\"id\", \"intervention\"))\n```\n:::\n\n\nBoth do exactly the same! In a code chunk you can take a new line after a comma (,) and the code nicely idents for you. It can make it easier to read and to debug if the code is nicely presented but it isn't essential!\n\n## Finished! {#ld-fin}\n\nAnd that's it, well done! Remember to save your work in your chapter folder and make a note of any mistakes you made and how you fixed them. You have started on your journey to become a confident and competent member of the open scientific community! \n\nNow would be a good time to get comfortable with what we've covered already and revise the activities and support materials presented so far if needed. If you're feeling comfortable with you can work your way through this book at your own pace or push yourself by using the additional resources highlighted in Programming Basics. And don't forget to try out the tasks below to check your understanding and knowledge of the skills you are learning!\n\nFinally, if you're using the R server, we strongly recommend that you download a copy of any files you have been working on and save them on your machine so that you have a local back-up.\n\n## Test yourself {#ld-test}\n\n### Knowledge Questions\n\n1. When loading in a .csv file, which function should you use? <div class='webex-radiogroup' id='radio_KFHAXUSVJI'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KFHAXUSVJI\" value=\"answer\"></input> <span>read_csv()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KFHAXUSVJI\" value=\"\"></input> <span>read.csv()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KFHAXUSVJI\" value=\"\"></input> <span>select()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_KFHAXUSVJI\" value=\"\"></input> <span>library()</span></label></div>\n\n\n\n<div class='webex-solution'><button>Explain this answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nRemember, in this course we use `read_csv()` and it is important that you use this function otherwise you may find that the data does not work as expected.\n:::\n\n\n</div>\n \n\n2. The function `inner_join()` takes the arguments `x`, `y`, `by`. What does `by` do? <div class='webex-radiogroup' id='radio_YKDFIPMTCP'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_YKDFIPMTCP\" value=\"\"></input> <span>Specifies the first object to join</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_YKDFIPMTCP\" value=\"\"></input> <span>Specifies the second object to join</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_YKDFIPMTCP\" value=\"answer\"></input> <span>Specifies the column to join by that both objects have in common</span></label></div>\n\n\n\n<div class='webex-solution'><button>Explain this answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nRemember, functions have arguments and the arguments all do something slightly different. In the `inner_join()` the `by` argument says which columns to join by. If you want to join by more than one column you need to put both columns inside the `c()` function.\n:::\n\n\n</div>\n \n\n3. What does the function `select()` do? <div class='webex-radiogroup' id='radio_XYLQUGQJBX'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_XYLQUGQJBX\" value=\"\"></input> <span>Keeps only the observations you specify</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_XYLQUGQJBX\" value=\"answer\"></input> <span>Keeps only the columns you specify</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_XYLQUGQJBX\" value=\"\"></input> <span>Keeps only the objects you specify</span></label></div>\n\n\n\n<div class='webex-solution'><button>Explain this answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nThe `select()` function comes from one of the tidyverse packages - dplyr to be precise. It is the main function we use to keep and remove columns we want or don't want. You will start to remember functions you need as you work more with them. Remember the best approach is to think back to what you did!\n:::\n\n\n</div>\n\n\n### Debugging exercises {#ld-debugex}\n\nOne key skill is learning how to fix errors in your code. These exercises below are specifically design to create errors. Ruun each exercise and try to solve the errors yourself before moving on to the next one. Make a note of what the error message was and how you solved it - you might find it helpful to create a new file just for error solving notes. You will find that you often make the same errors in over and over again when running analyses; experts also make tonnes of errors. The difference between a novice and an expert is that when you are first learning, an error might slow you down, but you will greatly speed you up with practice. Don't be put off by errors! \n\n1. Restart the R session (**`Session >> Restart R`**). Make sure that the working directory is set to the right folder and then run the below code:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndat <- read_csv(\"ahi-cesd.csv\")\n```\n:::\n\n\nThis will produce the error:\n\n```\n`could not find function \"read_csv\"`\n```\n\nOnce you figure out how to fix this error, make a note of it.\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n::: {.cell layout-align=\"center\"}\nWhen you restarted the session you unloaded all the packages you previously had loaded - i.e. the `tidyverse`. The function `read_csv()` is part of the `tidyverse` package which means that in order for the code to run you need to run `library(tidyverse)` to reload the package so that you can use the function. Remember that we always need to load packages into our library but we only install them once. Again, think about apps on your phone!\n:::\n\n\n</div>\n \n\n\n2. Restart the R session (**`Session >> Restart R`**). Make sure that the working directory is set to the right folder and then run the below code:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndat <- read_csv(\"ahi-cesd\")\n```\n:::\n\n\nThis will produce the error: \n\n```\n`Error: 'ahi-cesd' does not exist in current working directory`.\n```\n\nOnce you figure out how to fix this error, make a note of it.\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n::: {.cell layout-align=\"center\"}\nWhen loading data you need to provide the full file name including the file extension. In this case the error was caused by writing `ahi-cesd` instead of `ahi-cesd.csv`. As far as coding goes, these are two completely different files and only one of them exists in the working directory.\n:::\n\n\n</div>\n \n\n\n3. Restart the R session (**`Session >> Restart R`**). Make sure that the working directory is set to the right folder and then run the below code:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndat <- read_csv (\"ahi-cesd.csv\")\npinfo <- read_csv(\"participant-info.csv\")\nall_dat <- inner_join(x = dat, \n                      y = pinfo, \n                      by = \"id\", \"intervention\") \nsummary(all_dat)\n```\n:::\n\n\nLook at the summary for `all_dat`. You will see that R has duplicated the `intervention` variable, so that there is now an `intervention.x` and an `intervention.y` that contain the same data. Once you figure out how to fix this error, make a note of it.\n\n\n<div class='webex-solution'><button>Solution</button>\n\n\n::: {.cell layout-align=\"center\"}\nIf you want to join two objects that have mulitple columns in common you need to use the `c()` command to list all of the columns. The code above hasn't done this, it's just listed `id` and `intervention` without enclosing them with `c()` so it defaults to using just the first one and ignores the other column. When it does this both objects had an `intervention` column so it keeps both. The rule is, when joining objects, join them by all common columns!.\n:::\n\n\n</div>\n \n\n\n## Words from this Chapter\n\nBelow you will find a list of words that were used in this chapter that might be new to you in case it helps to have somewhere to refer back to what they mean. The links in this table take you to the entry for the words in the [PsyTeachR Glossary](https://psyteachr.github.io/glossary/){target=\"_blank\"}. Note that the Glossary is written by numerous members of the team and as such may use slightly different terminology from that shown in the chapter.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|term                                                    |definition                                                                                                                                                                              |\n|:-------------------------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|[assignment-operator](https://psyteachr.github.io/glossary/a#assignment-operator){target='_blank' class='glossary'}|The symbol <-, which functions like = and assigns the value on the right to the object on the left                                                                                      |\n|[chunk](https://psyteachr.github.io/glossary/c#chunk){target='_blank' class='glossary'}|A section of code in an R Markdown file                                                                                                                                                 |\n|[console](https://psyteachr.github.io/glossary/c#console){target='_blank' class='glossary'}|The pane in RStudio where you can type in commands and view output messages.                                                                                                            |\n|[csv](https://psyteachr.github.io/glossary/c#csv){target='_blank' class='glossary'}|Comma-separated variable: a file type for representing data where each variable is separated from the next by a comma.                                                                  |\n|[data-wrangling](https://psyteachr.github.io/glossary/d#data-wrangling){target='_blank' class='glossary'}|The process of preparing data for visualisation and statistical analysis.                                                                                                               |\n|[descriptive](https://psyteachr.github.io/glossary/d#descriptive){target='_blank' class='glossary'}|Statistics that describe an aspect of data (e.g., mean, median, mode, variance, range)                                                                                                  |\n|[environment](https://psyteachr.github.io/glossary/e#environment){target='_blank' class='glossary'}|A data structure that contains R objects such as variables and functions                                                                                                                |\n|[html](https://psyteachr.github.io/glossary/h#html){target='_blank' class='glossary'}|Hyper-Text Markup Language: A system for semantically tagging structure and information on web pages.                                                                                   |\n|[inner-join](https://psyteachr.github.io/glossary/i#inner-join){target='_blank' class='glossary'}|A mutating join that returns all the rows that have a match in the other table.                                                                                                         |\n|[knit](https://psyteachr.github.io/glossary/k#knit){target='_blank' class='glossary'}|To create an HTML, PDF, or Word document from an R Markdown (Rmd) document                                                                                                              |\n|[object](https://psyteachr.github.io/glossary/o#object){target='_blank' class='glossary'}|A word that identifies and stores the value of some data for later use.                                                                                                                 |\n|[package](https://psyteachr.github.io/glossary/p#package){target='_blank' class='glossary'}|A group of R functions.                                                                                                                                                                 |\n|[r-markdown](https://psyteachr.github.io/glossary/r#r-markdown){target='_blank' class='glossary'}|The R-specific version of markdown: a way to specify formatting, such as headers, paragraphs, lists, bolding, and links, as well as code blocks and inline code.                        |\n|[r-project](https://psyteachr.github.io/glossary/r#r-project){target='_blank' class='glossary'}|A project is simply a working directory designated with a .RProj file. When you open an R project, it automatically sets the working directory to the folder the project is located in. |\n|[reproducible-research](https://psyteachr.github.io/glossary/r#reproducible-research){target='_blank' class='glossary'}|Research that documents all of the steps between raw data and results in a way that can be verified.                                                                                    |\n|[tidyverse](https://psyteachr.github.io/glossary/t#tidyverse){target='_blank' class='glossary'}|A set of R packages that help you create and work with tidy data                                                                                                                        |\n|[working-directory](https://psyteachr.github.io/glossary/w#working-directory){target='_blank' class='glossary'}|The filepath where R is currently loading files from and saving files to.                                                                                                               |\n:::\n:::\n\n\n**End of Chapter**\n\nThat is end of this chapter. Be sure to look again at anything you were unsure about and make some notes to help develop your own knowledge and skills. It would be good to write yourself some questions about what you are unsure of and see if you can answer them later or speak to someone about them. Good work today!\n",
    "supporting": [
      "02-starting-with-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}