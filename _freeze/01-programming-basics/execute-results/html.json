{
  "hash": "a02f410392a9704b02c6c03176526e53",
  "result": {
    "markdown": "# Introduction to programming with R/R Studio\n\n\n\n\n\nIn this chapter, we will cover interacting with R and RStudio. We will provide an overview of basic programming concepts and terminology, common pitfalls, helpful hints, and where to get help. Those of you who have no programming experience should find this chapter particularly helpful, but there should be helpful hints and tips even if you have used R or another programming language before before.\n\n**Chapter Intended Learning Outcomes**\n\n- ILO1\n\n## R and RStudio\n\nR is a programming language that you will write code in and **<a class='glossary'>RStudio<span class='def'></span></a>** is an Integrated Development Environment (IDE) which makes working with R easier. Think of it as knowing English and using a plain text editor like NotePad to write a book versus using a word processor like Microsoft Word. You could do it, but it would not look as good and it would be much harder without things like spell-checking and formatting. \n\nIn a similar way, you can use R without RStudio but we wouldn not recommend it. The key thing to remember is that although you will do all of your work using RStudio for this course, you are actually using two pieces of software. This means that you will need both, you need to keep both up-to-date, and you should cite both in any work you do (see the Appendix on [citing R and RStudio](#citing-r-rstudio){target=\"_blank\"} when needed).\n\nBut first we need to look at starting up R and RStudio. There are two ways you can use R for Psychology as a student here at the University of Glasgow. First, you can use a online version of R and R through your web browser and we will refer to this as the **R server**. Second, you can download and install R and RStudio for free on your laptop or desktop computer.\n\n### Installing R and RStudio on your computer\n\nWe recommend wherever possible installing R and RStudio on your own computer. This is known as a local installation as you do not need to be connected to the internet to use it. We find it is easier to save and manage your files, and you can take your computer wherever you go. \n\nHowever, we appreciate not everyone has a computer that will support R and RStudio. All of our computer lab and library spaces have R and RStudio installed, so you will always be able to access those for working through the materials and your assignments. If you cannot install R and RStudio on your computer and there are accessibility issues preventing you from using the university computers, please come and speak with your course leads who will advise alternative options.  \n\nTo use R and RStudio on your computer, please see [Installing R](https://psyteachr.github.io/ug1-practical/installing-r.html){target=\"_blank\"} which has detailed instructions and links to the files you need to download, as well as links to a series of walkthroughs for installing R and RStudio on different types of computers. This video by [Danielle Navarro (choose the one for your own machine type)](https://www.youtube.com/playlist?list=PLRPB0ZzEYegOZivdelOuEn-R-XUN-DOjd){target=\"_blank\"} is also highly recommended\n\n## Getting to know R Studio\n\nBy default, RStudio has four windows:\n\n1. The **<a class='glossary'>console<span class='def'></span></a>**, where you can type R code in the bottom left (as shown in Figure @fig-img-rstudio).\n\n2. Eventually, there will be a **<a class='glossary'>script<span class='def'></span></a>** editor in the top left, but you will not see this when you open RStudio for the first time.\n\n3. The **<a class='glossary'>environment<span class='def'></span></a>** window in top right, where you will see things like data, functions, and objects that you create. \n\n4. Finally, the bottom right window shows files, plots, packages, and help documentation. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![RStudio interface](images/rstudio.png){#fig-img-rstudio fig-align='center' width=100%}\n:::\n:::\n\n\nYou will learn more about how to use the features included in RStudio throughout this course, but we recommend watching the [RStudio Essentials 1](https://posit.co/resources/videos/programming-part-1-writing-code-in-rstudio/){target=\"_blank\"} series of videos from the Posit team (the company who maintain RStudio). The video we link here lasts around 30 minutes and gives a tour of the main parts of RStudio. \n\n### Console vs. scripts\n\nWhen you first open up RStudio, you will not see an R script like above, there will just be the console window taking up the whole left half. You can write code in the console to test it out, but you cannot save that code anywhere, and you would lose all your code if you closed down RStudio. \n\nFor this chapter only, we will use the console window to show you some simple R code, but from Chapter 2 - [Creating reproducible documents ](#C2-repro-docs) - we will teach you to work in a type of R script called an **<a class='glossary'>R Markdown<span class='def'></span></a>** document which ends with the file name .Rmd. \n\nYou can open a new file in a number of ways, but the simplest is in the top menu of RStudio, selecting **`File >> New File >> R Markdown`** and clicking OK. You will then be able to see the extra pane in the top left like Figure @fig-img-rstudio.\n\n## Writing code with functions and arguments\n\nR code is made up of **<a class='glossary'>functions<span class='def'></span></a>** and **<a class='glossary'>arguments<span class='def'></span></a>** that go into the functions to create outputs. \n**Functions** in R execute specific tasks and normally take one or more **arguments**. You can think of these concepts like a spoken language as verbs (function) that require a subject and an object (arguments). You could also think of them as a kind of recipe. Some recipes (function) are quite simple and have one or two ingredients (arguments), while other recipes are more complicated with many ingredients (arguments). \n\nYou can spot functions as they end in round brackets (known as parentheses, `()`), and the arguments go within the round brackets. They tend to look a bit like this:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfunction_name(argument1 = value, argument2 = value)\n```\n:::\n\n\nThat would be the layout of a function with two arguments and each argument takes a value. Bare with us as these concepts might feel super abstract until you start using them. \n\nYou will learn to use many functions throughout this book and you can look up all the arguments that a function takes in the help documentation by using the format `?function`. You will see some arguments are required while others are optional. Optional arguments will often use what is known as a default setting, value, or option (normally specified in the help documentation) if you do not enter any value.\n\nAs an example, let us look at the help documentation for the function `rnorm()` - a function which randomly generates a set of numbers from what is known as the **<a class='glossary'>Normal Distribution<span class='def'></span></a>**. \n\n### Activity 1 - Finding help documentation for functions\n\nOpen up RStudio and in the console window (bottom left), type the following code:  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n?rnorm\n```\n:::\n\n\nThe help documentation for `rnorm()` should appear in the bottom right help panel. In the **Usage** section of the help, we see that `rnorm()` takes the following form:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrnorm(n, mean = 0, sd = 1)\n```\n:::\n\n\nIn the **Arguments** section of the help, there are explanations for each of the arguments: \n\n- `n` is the number of observations/numbers/data points we want to create, \n\n- `mean` is the **<a class='glossary'>mean<span class='def'></span></a>** of the observations/numbers/data points we will create. \n\n- and `sd` is the **<a class='glossary'>standard deviation<span class='def'></span></a>** of the observations/numbers/data points we will create. \n\nIn the **Details** section of the help, it notes that if no values are entered for `mean` and `sd` it will use a default of 0 for the mean and 1 for the standard deviation. So, these are the values the function will use for its arguments of `mean` and `sd` if you do not state any. However, because there is no **<a class='glossary'>default value<span class='def'></span></a>** for `n`, this means that you must state a value for the arguments `n`, otherwise the code will not run.\n\nThis is all still a little abstract, so let us try an example. Still using `rnorm()` let us set the required argument `n` to ask R to produce 5 random numbers. \n\n### Activity 2 - Running your first function\n\nType the following two lines of code into your console window. Press enter/return on your keyboard at the end of each line to \"run\" that line. So, type `set.seed(10072024)` and press enter/return and then type `rnorm(n = 5)` and press enter/return. You will now see these numbers in your console window:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.6773381  2.9686894 -1.0461339 -1.4800300  0.4313315\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nThese numbers have a mean close to 0 (*M* = 0.039) and a standard deviation (*SD*) close to 1 (*SD* = 1.784) - they are not exact because you only sampled a very small set and that sampling is random. \n\n::: {.callout-note collapse=\"true\"}\n# What does set.seed() do?\nYou can get R to generate seemingly random numbers, but they are not totally random. Computers generate random numbers through a predictable process, but they pick a starting point based on something like the clock time. If you run `rnorm(n = 5)` several times in the console, you will see the five numbers are different each time. However, when you run `set.seed(10072024)` first, you will get the same five numbers every time, which is useful when you want a random but reproducible set of numbers. \n:::\n\nNow, we can play with the function and change the additional arguments to produce a different set of numbers. This time we will say we want 5 numbers again (`n = 5`) but we want our mean closer to 10 (`mean = 10`) and our standard deviation closer to 2 (`sd = 2`). We would do that as follows and you should see the output numbers below.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(10072024)\n\nrnorm(n = 5, mean = 10, sd = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  8.645324 15.937379  7.907732  7.039940 10.862663\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nThis time, we created 5 random numbers again, but this set has a mean close to 10 (*M* = 10.079) and a SD close to 2 (*SD* = 3.569). Hopefully, you are starting to get a sense of arguments within functions, how you can change them, and how you can always remember to use the help documentation to understand what arguments a function requires. \n\nOver time, you start to remember which arguments you need within functions you commonly use, but even experienced R users have to regularly check the documentation. Coding is not a memory test, so do not worry if you find yourself needing to constantly look up the name of arguments.  \n\n::: {.callout-important}\n# Error mode\nOne thing that can be intimidating at first is making **<a class='glossary'>errors<span class='def'></span></a>**. They have little red marks and produce sometimes vague messages to try and explain what went wrong. You will make many errors as you learn and over time, you do not stop making errors, but you get faster at working out what went wrong and how you can fix it. So, we will introduce you to common errors as we work through the book to help with problem solving.  \n\nTry and run the following code in the console: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrnorm(mean = 10, sd = 2)\n```\n:::\n\n\nYou should get an error saying something like `Error in rnorm(mean = 10, sd = 2): argument \"n\" is missing, with no default`. This error message is useful as it is telling us we forget to state the `n` argument which has no default value, so the function has no idea how many observations to give you. You would fix this error by adding a value for `n` within the function. \n:::\n\n### Stating argument names\n\nIn the examples above, we have written out the argument names in our code (for example, we wrote `n = 5`, `mean = 10`, `sd = 2`), however, this is not strictly necessary. The following two lines of code would produce very similar outputs with the same number of values and similar means and standard deviations. Remember though: each time you run `rnorm()`, it will produce a slightly different set of numbers unless you set a seed.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrnorm(n = 6, mean = 3, sd = 1)\nrnorm(6, 3, 1)\n```\n:::\n\n\nThe main thing is that both lines of code would still work - the code knows what to do with the numbers. Both options work as the code is following a set order of arguments: `n` then `mean` then `sd`. If you do not write out the argument names, the code will use the default order of arguments, which for `rnorm` will assume that the first number you enter is `n`, the second number is `mean`, and the third number is `sd`. \n\nSo, you can write the argument names or not, but it is important to know the default order if you choose not to write the argument names. Alternatively, if you write out the argument names, then you can write the arguments in whatever order you like. The code below will still work and produce six numbers with a mean close to 3 and a standard deviation close to 1.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrnorm(sd = 1, \n      n = 6, \n      mean = 3)\n```\n:::\n\n\nWhen you are first learning R, we recommend writing out the argument names every time as it can help you remember and understand what each part of the function is doing. However, as your skills progress you may find it quicker to omit the argument names and you will also see examples of code online that do not use argument names. In this course, we will always write out the argument names the first time we use each function, but afterwards, we may omit them.\n\n::: {.callout-warning}\nIf you do omit argument names, it is important to check the values you use for arguments are the ones you intended to you. The sneakiest errors are the ones that \"work\" in that they do not produce an error, but they are doing something different to what you expect. For example, if you wanted five numbers with a mean of 1 and *SD* of 2, `rnorm(5, 2, 1)` would work, but we accidentally entered the mean and SD the wrong way around. \n:::\n\n### Tab auto-complete\n\nOne very useful feature of RStudio is the tab auto-complete for functions (see Figure @fig-img-autocomplete). If you write the name of the function and then press the tab key on your keyboard, RStudio will show you the arguments that function takes along with a brief description. If you press enter on the argument name, it will fill in the name for you, just like auto-complete on your phone. \n\nYou can also use the tab button when writing a function name to auto-complete that function name or to find functions that start with certain letters. This feature can be really helpful if you cannot quite remember the name of a function or argument. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Tab auto-complete](images/autocomplete.png){#fig-img-autocomplete fig-align='center' width=100%}\n:::\n:::\n\n\n## Base R and packages {#packages}\n\nWhen you install R you will have access to a range of functions including options for data wrangling and statistical analysis. The functions that are included in the default installation of R are typically referred to as **<a class='glossary'>Base R<span class='def'></span></a>** and there is a useful cheat sheet that shows many Base R functions which can be found about halfway down [this page under Contributed Cheatsheets here](https://www.rstudio.com/resources/cheatsheets/){target=\"_blank\"} along with a host of other cheatsheets.\n\nHowever, the power of R is that it is extendable and open source - put simply, if a function doesn't exist or doesn't work very well, anyone can create a new **<a class='glossary'>package<span class='def'></span></a>** that contains data and code to allow you to perform new tasks. You may find it useful to think of **Base R** as the default apps that come on your phone and other packages as additional apps - the ones that you really want to use to make the phone your own - that you need to download separately.\n\n### Activity 3: Install the tidyverse (optional)\n\nIn order to use a package, you must first install it. The following code installs the package `tidyverse`, a package we will use very a lot on this course and we will introduce in later chapters.\n\n**PLEASE NOTE: Do not need to do this activity if you are working on the R server or if you are using the computers in a University lab or Boyd Orr Building**. This activity should only be performed on your own device.  \n\n* If you are working on your own computer, use the below code to install the **<a class='glossary'>tidyverse<span class='def'></span></a>**. If you are using the R server or using the Boyd Orr lab machine then skip this activity.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n::: {.cell layout-align=\"center\" type='danger'}\n<div class=\"danger\">\n<p>If you get an error message that says something like “WARNING: Rtools\nis required to build R packages” you may need to download and install an\nextra bit of software called <a\nhref=\"https://cran.r-project.org/bin/windows/Rtools/\">Rtools</a> (this\nis one of the many reasons why using the server can be easier).</p>\n</div>\n:::\n\n\nBut how do we go about using a packge? Note that you only need to install a package once, however, each time you start R you need to load the packages you want to use. Again this is a bit like how you need to install an app on your phone once, but you need to open it every time you want to use it.\n\nTo load packages we use the function `library()` - this loads packages into your working library. Typically you would start any analysis script by loading all of the packages you need, but we will come back to that in the next chapter.\n\n### Activity 4: Load the tidyverse\n\n* Run the below code to load the tidyverse in to your working library. \n* Do this activity regardless of whether you are using your own computer or the server.  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nOften when you load packages you get information in your console window. You don't always get a message but often you will. It does also tend to look like an error message at first - it's not. It's just R telling you what it's done.\n\nNow that we've loaded the `tidyverse` package we can use any of the functions it contains but remember, you need to run the `library()` function every time you start R.\n\n### Package updates\n\nIn addition to updates to R and R Studio, the creators of packages also sometimes update their code. This can be to add functions to a package, or it can be to fix errors. One thing to avoid is unintentionally updating an installed package. When you run `install.packages()` it will always install the latest version of the package and it will overwrite any older versions you may have installed. Sometimes this isn't a problem, however, sometimes you will find that the update means your code no longer works as the package has changed substantially. It is possible to revert back to an older version of a package but try to avoid this anyway.\n\n\n::: {.cell layout-align=\"center\" type='danger'}\n<div class=\"danger\">\n<p>To avoid accidentally overwriting a package with a later version, you\nshould <strong>never</strong> include <code>install.packages()</code> in\nyour analysis scripts in case you, or someone else runs the code by\nmistake. Remember, the server will already have all of the packages you\nneed for this course so you only need to install packages if you are\nusing your own machine.</p>\n</div>\n:::\n\n\n### Package conflicts {#conflicts}\n\nThere are thousands of different R packages and each package has lots and lots of functions. Unfortunately, because packages are developed by different people, sometimes different packages have the same name for different functions. For example, the packages `dplyr` and `MASS` both have a function named `select()`. **Do not run the below code** but if you did you would see a warning telling you that there is a conflict.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(MASS)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'MASS'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n:::\n:::\n\n\nYou would see a warning that **The following object is masked from 'package:dplyr': select**. In this case, R is telling you that the function `select()` in the `dplyr` package is being hidden (or 'masked') by another function with the same name from the `MASS` package. If you were to try and use `select()`, R would use the function from the package that was loaded most recently - in this case it would use the function from `MASS`. This is an issue because you think you are using one function but really you are using another - and they often work differently and you get odd issues in your code that you don't expect. There are various solutions but one simple one, if you already know of the clash, is to specify which package you want to use for a particular function by writing the code in the format `package::function`, meaning \"use the function from the package\", for example:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndplyr::select()\nMASS::select()\n```\n:::\n\n\nClashes are inevitable in your learning and when you see one you will probably not spot it at first but you will learn to resolve them quickly.\n\n## Objects\n\nSo we have learnt about functions and arguments and earlier we said functions give us outputs. Another name for outputs, or at least specific types of outputs, are **<a class='glossary'>objects<span class='def'></span></a>**. Objects are the output of functions basically - but really you can create objects without functions as well. A large part of your coding will involve creating and manipulating objects. Objects contain stuff. That stuff can be numbers, words, or the result of functions, operations and analyses. But the first key thing to know about object is how to create them and to give them content. You assign content to an object using `<-` - often called the \"left arrow\" or the **<a class='glossary'>assignment operator<span class='def'></span></a>** or stated as \"assigned to\". Note that we don't use `=`. There is a very large discussion on why objects are assigned content and not equal to content but that is for another time. For now, just remember that we assign (`<-`) content, be it words, numbers, or function output, to objects. Let's try that now.\n\n### Activity 5: Create some objects\n\n* Type the following code into the console window and run each line. You should see that `name`, `age`, `today`, `new_year`, and `data` appear in the environment pane.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nname <- \"emily\"\nage <- 16 + 17 \ntoday <- Sys.Date()\nnew_year <- as.Date(\"2020-01-01\")\ndata <- rnorm(n = 10, mean = 15, sd = 3)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Objects in the environment. Feel free to change your numbers and check that they match the environment!](images/objects-enviro.png){fig-align='center' width=100%}\n:::\n:::\n\n\nNote that in these examples, `name`,`age`, and `new_year` would always contain the values `emily`, 33, and the date of New Year's Day 2020, however, `today` will draw the date from the operating system on the day you are using the computer, and `data` will be a randomly generated set of data - as we saw earlier - so the values of these objects will not be static. \n\n* Why don't you try changing the name to your name and the age to your age, and seeing if they update in the environment window.\n\nImportantly, for what we will learn in future chapters, objects can be involved in calculations and can interact with each other. For example:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nage + 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 43\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnew_year - today\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of -1652 days\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14.97726\n```\n:::\n:::\n\n\nFinally, you can store the result of these operations on objects in a new object as below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndecade <- age + 10\n```\n:::\n\n::: {.cell layout-align=\"center\" type='try'}\n<div class=\"try\">\n<p>Remember that you may find it helpful to read <code>&lt;-</code> as\n<code>contains</code> or <code>assigned to</code>, e.g.,\n<code>name</code> contains the text <code>emily</code> or\n<code>emily</code> is assigned to the object <code>name</code>.</p>\n</div>\n:::\n\n\nYou will constantly be creating objects throughout this course and you will learn more about them and how they behave as we go along, however, for now it is enough to understand that they are a way of saving values, that these values can be numbers, text, or the result of operations, and that they can be used in further operations to create new variables.\n\n\n::: {.cell layout-align=\"center\" type='info'}\n<div class=\"info\">\n<p>You may also see objects referred to as ‘variables’. There is a\ndifference between the two in programming terms, however, they are used\nsynchronously very frequently.</p>\n</div>\n:::\n\n\n### Looking after the environment {#look-env}\n\nNow that we are starting to learn about the other windows and in particular the environment window, if you've been writing a lot of code you may find that the environment window (or workspace) has become cluttered with many objects. This can make it difficult to figure out which object you need and therefore you run the risk of using the wrong data frame. If you're working on a new dataset, or if you've tried lots of different code before getting the final version, it is good practice to remember to clear the environment to avoid using the wrong object. You can do this in several way.\n\n1. To remove individual objects, you can type `rm(object_name)` in the console. Try this now to remove one of the objects you created in the previous section. For example, you would remove the object `age` by writing `rm(age)`\n2. To clear all objects from the environment run `rm(list = ls())` in the console.\n3. To clear all objects from the environment you can also click the broom icon in the environment pane. \n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Clearing the workspace](images/broom.png){fig-align='center' width=100%}\n:::\n:::\n\n\nSo it is a good idea to keep your environment clean and tidy. Which leads us on to setting up some global options so that you don't get confused.\n\n## Global options\n\nWhen you open RStudio it will show you what you were last working on, including your code and any objects you have created, assuming this is not the first time you have used RStudio. This might sound helpful, but actually it tends to cause more problems than it's worth because it means that you risk accidentally using an old version of an object - say `Date` is kept over in the environment from the last time you did some work and you don't realise and you start working on the wrong `Date` because you wanted a new one etc etc etc. In reality, we recommend changing the settings so that each time you start RStudio, it opens a fresh new environment. You can do this by clicking on the top menu **`Tools >> Global Options`** and then deselecting boxes so that your box looks like the below and saving/applying the changes.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Global options - you are aiming to make your global options look similar, in terms of what is ticked, to the above. The main thing is to make sure that Restore RData into workspace is not ticked, and we would set Save workspace to Never. The History options are optional but can help. The update options are really just in case you want to.](images/global_options.jpg){fig-align='center' width=100%}\n:::\n:::\n\n\nThat should save a lot of hassle going forward. You will still encounter issues of course and so we are going to end this chapter by having a quick look at getting help.\n\n## Getting Help \n\n### Help and additional resources\n\nGetting good at programming really means getting good trying stuff out, searching for help online, and finding examples of code to use as a basis of your own. If you are having difficulty with any of the exercises contained in this book then you can of course ask for help from the team, however, learning to problem solve effectively is a key skill that you will develop throughout this course. There are a wealth of additional resources in the Appendix of this book so it might be worth checking them out, but here are four approaches we take to resolving an issue when we hit a problem.\n\n* Use the help documentation. If you're struggling to understand how a function works, remember the `?function` command.\n* Think when did you last run this function or code successfully? Look back on what you did then and see what is the difference. The skills build on each other so you should always look back to go forward!\n* If you get an error message, copy and paste it in to Google - it's very likely someone else has had the same problem. \n* Trying googling your question in the style of the package name or function name and what you want to do. For example, **arrange data tidyverse** or maybe **sort data in r**\n\nAnd if those approaches don't work, then, in addition to these course materials and the other [PsyTeachR books](https://psyteachr.github.io/){target=\"_blank\"}, there are a number of excellent online resources for learning data skills that can serve as quick guides:\n\n  * individual package quickguides found via the top menu: **`Help >> Cheat Sheets`**\n  * [R Cookbook](http://www.cookbook-r.com/)\n  * [StackOverflow](https://stackoverflow.com/)\n  * [R for Data Science](https://r4ds.had.co.nz/)\n  * Search or use the [#rstats](https://twitter.com/search?f=tweets&q=%23rstats&src=typd) hashtag on Twitter\n  \nYou will find that the #rstats community as it is referred to is very helpful and create a lot of excellent materials.\n\n### Debugging tips\n\nAnother top skill for resolving issues is what is known as debugging - fixing your coding mistakes. In fact a large part of coding is trying to figure why your code doesn't work and this is true whether you are a novice or an expert. As you progress through this course you should keep a record of mistakes you make and how you fixed them. In the early chapters we will provide a number of common mistakes to look out for but you will undoubtedly make (and fix!) new mistakes yourself. Thing to keep in mind when coding are:\n\n* Have you loaded the correct packages for the functions you are trying to use? One very common mistake is to write the code to load the package, e.g., `library(tidyverse)` but then forget to run it.\n* Have you made a typo? Coding has to be specific on spelling and `data` is not the same as `DATA`, and `t.test` is not the same as `t_test`.\n* Is there a package conflict? Have you tried specifying the package and function with `package::function`?\n* Is it definitely an error? Not all red text in R means an error - sometimes it is just giving you a message with information. \n\n### Reset your R sessions\n\nFinally, if you find that your code isn't working and you can't figure out why, it might be worth starting a new session. This will clear the environment and detach all loaded packages - think of it like restarting your phone.When you open up R and start writing code, loading packages, and creating objects, you're typically doing so in a new **session**. In addition to clearing the workspace, it can sometimes be useful to start a new session. This will happen automatically each time you start R on your computer, although sessions can persist on the server. \n\n### Activity 6\n\n* This last activity shows a quick way to restart R from inside RStudio. On the Top Menu, click **`Session >> Restart R`**. \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![The truth about programming](images/new_session.png){fig-align='center' width=100%}\n:::\n:::\n\n\nAll that said, don't worry about making mistakes. Accept that you will make them and learn from them. And remember we are here to help.\n\n## Test yourself\n\nFinally, throughout the book you will find additional questions like these to help you check your understanding. Some will have blanks to fill in, some will be Multiple Choice, but the answers will be revealed in the chapter. If you are unsure of the answer and can't find the explanation, just ask!\n\n**Question 1.** Why should you never include the code `install.packages()` in your analysis scripts? <div class='webex-radiogroup' id='radio_QVXPXWLCUD'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_QVXPXWLCUD\" value=\"\"></input> <span>You should use library() instead</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_QVXPXWLCUD\" value=\"\"></input> <span>Packages are already part of Base R</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_QVXPXWLCUD\" value=\"answer\"></input> <span>You (or someone else) may accidentally install a package update that stops your code working</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_QVXPXWLCUD\" value=\"\"></input> <span>You already have the latest version of the package</span></label></div>\n \n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nRemember, when you run `install.packages()` it will always install the latest version of the package and it will overwrite any older versions of the package you may have installed.\n:::\n\n\n</div>\n \n<br>\n\n**Question 2.**What will the following code produce?\n  \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrnorm(6, 50, 10)\n```\n:::\n\n\n<div class='webex-radiogroup' id='radio_RTQPRJQCBG'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RTQPRJQCBG\" value=\"\"></input> <span>A dataset with 10 numbers that has a mean of 6 and an SD of 50</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RTQPRJQCBG\" value=\"answer\"></input> <span>A dataset with 6 numbers that has a mean of 50 and an SD of 10</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RTQPRJQCBG\" value=\"\"></input> <span>A dataset with 50 numbers that has a mean of 10 and an SD of 6</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RTQPRJQCBG\" value=\"\"></input> <span>A dataset with 50 numbers that has a mean of 10 and an SD of 6</span></label></div>\n  \n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nThe default form for `rnorm()` is `rnorm(n, mean, sd)`. If you need help remembering what each argument of a function does, look up the help documentation by running `?rnorm`\n:::\n\n\n</div>\n  \n<br>\n\n**Question 3.** If you have two packages that have functions with the same name and you want to specify exactly which package to use, what code would you use? \n\n<div class='webex-radiogroup' id='radio_QTEYMPMEQB'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_QTEYMPMEQB\" value=\"answer\"></input> <span>package::function</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_QTEYMPMEQB\" value=\"\"></input> <span>function::package</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_QTEYMPMEQB\" value=\"\"></input> <span>library(package)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_QTEYMPMEQB\" value=\"\"></input> <span>install.packages(package)</span></label></div>\n  \n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nYou should use the form `package::function`, for example `dplyr::select`. Remember that when you first load your packages R will warn you if any functions have the same name - remember to look out for this!\n:::\n\n\n</div>\n  \n<br>\n\n**Question 4.** Which of the following is most likely to be the input to an argument? <div class='webex-radiogroup' id='radio_GJTVNBATZI'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GJTVNBATZI\" value=\"\"></input> <span>read_csv()</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GJTVNBATZI\" value=\"\"></input> <span><-</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_GJTVNBATZI\" value=\"answer\"></input> <span>35</span></label></div>\n\n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nread_csv() looks like a function as it has the brackets at the end of it and the <- is the assignment symbol so it is most likely that 35 might be the input to an argument as it is just a value.\n:::\n\n\n</div>\n \n<br>\n\n**Question 5.** An easy way to spot functions is to look for <div class='webex-radiogroup' id='radio_LSIMCOYVGZ'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_LSIMCOYVGZ\" value=\"\"></input> <span>computers</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_LSIMCOYVGZ\" value=\"\"></input> <span>numbers</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_LSIMCOYVGZ\" value=\"answer\"></input> <span>brackets</span></label></div>\n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nRemember that functions tend to have brackets or parentheses at the end of their name and the arguments and values go inside the parentheses.\n:::\n\n\n</div>\n \n<br>\n\n**Question 6.** The job of `<-` is to send the output from the function to a/an <div class='webex-radiogroup' id='radio_ZGCHBNNDIY'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ZGCHBNNDIY\" value=\"\"></input> <span>argument</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ZGCHBNNDIY\" value=\"answer\"></input> <span>object</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_ZGCHBNNDIY\" value=\"\"></input> <span>assignment</span></label></div>\n\n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nThis is the assignment operator and we use it, `<-`, to assign content such as the output of functions to an object.\n:::\n\n\n</div>\n \n<br>\n\n**Question 7.** Why won't the following code give me 10 values with a mean close to 5 and an sd close to 1: `rnorm(n = 10, meen = 5, sd = 1)`? <div class='webex-radiogroup' id='radio_RTUCBAHYYD'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RTUCBAHYYD\" value=\"\"></input> <span>d. The argument names have been included</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RTUCBAHYYD\" value=\"answer\"></input> <span>c. One of the arguments is spelt incorrectly</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RTUCBAHYYD\" value=\"\"></input> <span>b. The order of arguments is not correct</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_RTUCBAHYYD\" value=\"\"></input> <span>a. The values do not match what I wanted</span></label></div>\n\n\n\n<div class='webex-solution'><button>Explain This Answer</button>\n\n\n::: {.cell layout-align=\"center\"}\nThe answer is c - One of the arguments is spelt incorrectly. If you look closely you will see that the argument `mean` has been spelt with two e's instead of one e, `meen`. This will create an error and the code will crash. This is a typical debugging issue in coding and just shows you need to be careful with spelling.\n:::\n\n\n</div>\n \n<br>\n\n## Words from this Chapter\n\nBelow you will find a list of words that were used in this chapter that might be new to you in case it helps to have somewhere to refer back to what they mean. The links in this table take you to the entry for the words in the [PsyTeachR Glossary](https://psyteachr.github.io/glossary/){target=\"_blank\"}. Note that the Glossary is written by numerous members of the team and as such may use slightly different terminology from that shown in the chapter.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> argument </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> assignment operator </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> base R </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> console </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> default value </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> environment </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> error </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> function </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> mean </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> normal distribution </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> object </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> package </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> R markdown </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> RStudio </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> script </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> standard deviation </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> tidyverse </td>\n   <td style=\"text-align:left;\">  </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n**End of Chapter**\n\nThat is end of this chapter. Be sure to look again at anything you were unsure about and make some notes to help develop your own knowledge and skills. It would be good to write yourself some questions about what you are unsure of and see if you can answer them later or speak to someone about them. Good work today!\n",
    "supporting": [
      "01-programming-basics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}